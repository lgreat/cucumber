<?xml version="1.0" encoding="UTF-8"?>
<jsp:root xmlns:jsp="http://java.sun.com/JSP/Page"
          xmlns="http://www.w3.org/1999/xhtml"
          xmlns:gsml="urn:jsptagdir:/WEB-INF/tags/gsml"
          xmlns:pageHelper="urn:jsptagdir:/WEB-INF/tags/pageHelper"
          xmlns:mod="urn:jsptagdir:/WEB-INF/tags/mod"
          version="2.0" >
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
<jsp:directive.page contentType="text/html"/>
<jsp:output doctype-root-element="html"
            doctype-public="-//W3C//DTD XHTML 1.0 Transitional//EN"
            doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"/>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>School Boundaries | GreatSchools</title>
    <style type="text/css">
        div.leftSide {
            width: 233px;
        }
        div.rightSide {
            width: 720px;
        }
        div.rightSide .js_spinny {
            margin: 5px 15px 0 0;
        }
        .searchLocationLabel {
            margin-left: 15px;
        }
        #districtListDiv select {
            width: 233px;
        }
        #schoolListDiv {
            height: 350px;
            overflow-y: scroll;
            border: 1px solid;
            position: relative;
        }
        #schoolList li {
            margin-bottom: 3px;
            list-style: disc inside;
            background-color: #ddd;
            font-size: 12px;
            padding: 1px;
        }
        #schoolList li.selected {
            border: 1px solid red;
            padding: 0;
        }
        #map-canvas{
            width:700px;
            height:500px;
            border:2px solid #999;
            position: relative;
        }
        #map-wrapper {
            position: relative;
        }
        #js_loading {
            padding: 5px;
            background-color: #eee;
            border: 1px solid #666;
            position: absolute;
            bottom: 15px;
            left: 300px;
        }
    </style>

    <pageHelper:externalJavascript file="/res/js/history.min.js"/>
    <pageHelper:externalJavascript file="/res/js/boundary.js"/>
    <pageHelper:externalJavascript file="http://maps.google.com/maps/api/js?sensor=false"/>

    <script type="text/javascript">
        <![CDATA[

        function isScrolledIntoView(elem, parentElem) {
            // position should be between 0 and height. parentElem must be relatively positioned!
            var elemTop = $(elem).position().top;
            return elemTop > 0 && elemTop < $(parentElem).height();
        }
        var GS = GS || {};

        GS.Boundaries = GS.Boundaries || {};

//        GS.Boundaries.events = {};
//        GS.Boundaries.Event = function(name) {
//            var callbacks;
//            var event = name && GS.Boundaries.events[name];
//            if (!event) {
//                callbacks = jQuery.Callbacks();
//                event = {
//                    trigger: callbacks.fire,
//                    subscribe: callbacks.add,
//                    unsubscribe: callbacks.remove
//                };
//                if (name) {
//                    GS.Boundaries.events[name] = event;
//                }
//            }
//            return event;
//        };
//        var myEvent = new GS.Boundaries.Event('districtsLoaded');
        var districtBoundaryMap = null;

        var showPublicSchools = function() {
            return $('#js_schoolType_public').prop('checked');
        };
        var showPrivateSchools = function() {
            return $('#js_schoolType_private').prop('checked');
        };
        new (function() {
            var stuffOnMap = {};
            var selectedDistrict = null;
            var selectedSchool = null;
            var mapClickListeners = new Array();
            var centerMarker = null;
            var mapInfoWindow = new google.maps.InfoWindow();

            // AJAX METHODS
            // MISCELLANEOUS FUNCTIONS
            var centerMap = function(latLng, options) {
                options = options || {};
                var moveMarker = typeof(options.moveMarker) !== 'undefined' ? options.moveMarker : false;
                districtBoundaryMap.panTo(latLng);
                if (moveMarker) {
                    setCenterMarkerAtLocation(latLng);
                }
            };
            var setCenterMarkerAtLocation = function(latLng) {
                if (centerMarker == null) {
                    centerMarker = GS.Map.Helper.createMarker({
                        center: {latitude:latLng.lat, longitude:latLng.lng},
                        size: {width:39, height:34},
                        url: '/res/img/map/green_arrow.png',
                        shadow: {
                            url: '/res/img/map/green_arrow_shadow.png',
                            size:new google.maps.Size(39,34),
                            anchor:new google.maps.Point(11, 34)},
                        origin: {x:0, y:0},
                        anchor: {x:11, y:34},
                        shape: {type:'poly', coord:[0, 0, 23, 0, 23, 34, 0, 34]}
                    });
                } else {
                    centerMarker.setPosition(latLng);
                }
            };
            var initMap = function(center) {
                districtBoundaryMap = new google.maps.Map(document.getElementById('map-canvas'), {
                    zoom: 11,
                    center: center,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                });
                try {
                    GS.Boundaries.boundaryHelper.map = districtBoundaryMap;
                } catch (e) {
                    GS.Util.log("ERROR: " + e);
                }
                $('.js_showWithMap').show();
                setCenterMarkerAtLocation(center);
                centerMarker.setMap(districtBoundaryMap);
            };
            var clearMap = function() {
                mapInfoWindow.close();
                for (var key in stuffOnMap) {
                    if (stuffOnMap.hasOwnProperty(key)) {
                        var thingOnMap = stuffOnMap[key];
                        thingOnMap.hideMarker();
                        thingOnMap.hidePolygon();
                        delete stuffOnMap[key];
                    }
                }
                updateDistrictList();
                updateSchoolList();
                updateDebugListeners();
            };
            var hideAllPolygons = function() {
                mapInfoWindow.close();
                for (var key in stuffOnMap) {
                    if (stuffOnMap.hasOwnProperty(key)) {
                        stuffOnMap[key].hidePolygon();
                    }
                }
            };
            var hideAllSchoolPolygons = function() {
                for (var key in stuffOnMap) {
                    if (stuffOnMap.hasOwnProperty(key)) {
                        var obj = stuffOnMap[key];
                        if (obj.isSchool()) {
                            obj.hidePolygon();
                        }
                    }
                }
            };
            var hidePrivateSchools = function() {
                for (var key in stuffOnMap) {
                    if (stuffOnMap.hasOwnProperty(key)) {
                        var obj = stuffOnMap[key];
                        if (obj.isSchool() && obj.schoolType == 'private') {
                            obj.hide();
                        }
                    }
                }
            };
            var hideSchoolsWithDistrict = function() {
                for (var key in stuffOnMap) {
                    if (stuffOnMap.hasOwnProperty(key)) {
                        var obj = stuffOnMap[key];
                        if (obj.isSchool() && obj.districtId > 0) {
                            obj.hide();
                        }
                    }
                }
            };
            var showSchoolMarkersForDistrict = function(district) {
                for (var key in stuffOnMap) {
                    if (stuffOnMap.hasOwnProperty(key)) {
                        var existingObj = stuffOnMap[key];
                        if (existingObj.isSchool() && existingObj.getDistrictKey() == district.getKey()) {
                            existingObj.showMarker();
                        }
                    }
                }
            };
            var hideSchoolsOutsideOfDistrict = function(district) {
                for (var key in stuffOnMap) {
                    if (stuffOnMap.hasOwnProperty(key)) {
                        var existingObj = stuffOnMap[key];
                        if (existingObj.isSchool() && existingObj.districtId > 0 && existingObj.getDistrictKey() != district.getKey()) {
                            existingObj.hide();
                        }
                    }
                }
            };
            var showInfoWindowForSelectedSchool = function() {
                for (var key in stuffOnMap) {
                    if (stuffOnMap.hasOwnProperty(key)) {
                        var obj = stuffOnMap[key];
                        if (obj.isSchool() && obj.isPolygonShown()) {
                            showSchoolInfoWindow(obj);
                            break;
                        }
                    }
                }
            };

            // EVENT HANDLERS
            var createDistrictMarkerClickListener = function(districtOnMap) {
                return function() {
                    districtClickHandler(districtOnMap, {center:false});
                };
            };
            var createSchoolMarkerClickListener = function(schoolOnMap) {
                return function() {
                    schoolClickHandler(schoolOnMap, {center:false});
                };
            };
            var showDistrictInfoWindow = function(district) {
                var infoWindowElement = $('#boundaryMapDistrictInfoWindow');
                var nameLink = '<a href="' + district.url + '">' + district.name + '</a>';
                infoWindowElement.find('.js_name').html(nameLink);
                var ratingImg = '<span class="sprite badge_sm_';
                if (district.rating > 0 && district.rating < 11) {
                    ratingImg += district.rating
                } else {
                    ratingImg += 'na'
                }
                ratingImg += '"><!-- do not collapse --></span>';
                infoWindowElement.find('.js_rating').html(ratingImg);
                var addr = '';
                if (district.address.street1) {
                    addr += district.address.street1 + '<br/>';
                }
                if (district.address.cityStateZip) {
                    addr += district.address.cityStateZip;
                }
                infoWindowElement.find('.js_address').html(addr);
                mapInfoWindow.setContent(
                        '<div style="width:275px;">'+infoWindowElement.html()+'</div>'
                );
                mapInfoWindow.open(GS.Boundaries.boundaryHelper.map, district.marker);
                selectedDistrict = district;
            };
            var showSchoolInfoWindow = function(school) {
                var infoWindowElement = $('#boundaryMapSchoolInfoWindow');
                var nameLink = '<a href="' + school.url + '">' + school.name + '</a>';
                infoWindowElement.find('.js_name').html(nameLink);
                var ratingImg = '<span class="sprite badge_sm_';
                if (school.rating > 0 && school.rating < 11) {
                    ratingImg += school.rating
                } else {
                    ratingImg += 'na'
                }
                ratingImg += '"><!-- do not collapse --></span>';
                infoWindowElement.find('.js_rating').html(ratingImg);
                var addr = '';
                if (school.address.street1) {
                    addr += school.address.street1 + '<br/>';
                }
                if (school.address.cityStateZip) {
                    addr += school.address.cityStateZip;
                }
                infoWindowElement.find('.js_address').html(addr);
                mapInfoWindow.setContent(
                        '<div style="width:275px;">'+infoWindowElement.html()+'</div>'
                );
                mapInfoWindow.open(GS.Boundaries.boundaryHelper.map, school.marker);
                selectedSchool = school;
            };
            var districtClickHandler = function(district, params) {
                var moveToCenter = typeof(params.center) !== 'undefined' ? params.center : false;
                hideSchoolsOutsideOfDistrict(district);
                if (!district.isPolygonShown()) {
                    hideAllPolygons();
                    if (district.hasPolygon()) {
                        district.showPolygon();
                        updateDistrictList();
                        updateDebugListeners();
                    } else {
                        GS.Boundaries.boundaryHelper.getDistrictBoundaryByIdAjax(district.state, district.id, district.name
                        ).done(function() {
                            updateDistrictList();
                            updateDebugListeners();
                        });
                    }
                }
                if (showPublicSchools()) {
                    if (!district.schoolsLoaded) {
                        GS.Boundaries.boundaryHelper.getAllSchoolsForDistrictAjax(district.state, district.id, district.name
                        ).done(function() {
                                    district.schoolsLoaded = true;
                                    updateSchoolList();
                                    updateDebugListeners();
                                }
                        );
                    } else {
                        showSchoolMarkersForDistrict(district);
                        updateSchoolList();
                    }
                }
                if (showPrivateSchools()) {
                    loadPrivateSchoolsNearPoint(district.marker.getPosition().lat(), district.marker.getPosition().lng()
                    ).always(function() {
                        updateSchoolList();
                    });
                }
                if (moveToCenter && district.hasMarker()) {
                    centerMap(district.marker.getPosition());
                }
                showDistrictInfoWindow(district);
            };
            var schoolClickHandler = function(school, params) {
                var moveToCenter = typeof(params.center) !== 'undefined' ? params.center : false;
                showSchoolInfoWindow(school);
                if (!school.isPolygonShown()) {
                    hideAllSchoolPolygons();
                    if (school.hasPolygon()) {
                        school.showPolygon();
                        updateSchoolList();
                        updateDebugListeners();
                    } else {
                        GS.Boundaries.boundaryHelper.getSchoolBoundaryByIdAjax(school.state, school.id, school.name).done(function() {
                            if (moveToCenter) {
                                if (school.centroid && school.centroid.lat && school.centroid.lon) {
                                    centerMap(new google.maps.LatLng(school.centroid.lat, school.centroid.lon));
                                } else {
                                    centerMap(school.marker.getPosition());
                                }
                            }
                        }).always(function() {
                            updateSchoolList();
                            updateDebugListeners();
                        });
                    }
                }
            };
            var loadDistrictsForLocationEventHandler = function(event) {
                if (event.latLng) {
                    mapInfoWindow.close();
                    selectedDistrict = null;
                    GS.Boundaries.boundaryHelper.loadDistrictsServingLocationAjax
                            (event.latLng.lat(), event.latLng.lng(), {showPolygons: true, showMarkers: true})
                    .done(function(data) {
                        updateDistrictList();
                        updateDebugListeners();
                    });
                }
            };
            var storeData = function(data) {
                var keyMap = data.keyMap;
                for (var prop in keyMap) {
                    if (keyMap.hasOwnProperty(prop)) {
                        var existingObj = stuffOnMap[prop];
                        var newObj = keyMap[prop];
                        if (typeof(existingObj) !== 'undefined') {
                            if (!newObj.hasMarker() && existingObj.hasMarker()) {
                                newObj.setMarker(existingObj.marker);
                            } else if (existingObj.hasMarker()) {
                                existingObj.hideMarker(); // gonna get clobbered below
                            }
                            if (!newObj.hasPolygon() && existingObj.hasPolygon()) {
                                newObj.setPolygon(existingObj.polygon);
                            } else if (existingObj.hasPolygon()) {
                                existingObj.hidePolygon(); // gonna get clobbered below
                            }
                        }
                        if (newObj.hasMarker()) {
                            google.maps.event.clearListeners(newObj.marker, 'click');
                            google.maps.event.addListener(newObj.marker, 'click', newObj.isSchool()? createSchoolMarkerClickListener(newObj) : createDistrictMarkerClickListener(newObj));
                        }
                        stuffOnMap[prop] = newObj;
                    }
                }
            };
            var loadSchoolsServingLocation = function(lat, lon) {
                var workQueue;
                if (showPublicSchools()) {
                    workQueue = GS.Boundaries.boundaryHelper.loadSchoolsServingLocationAjax(lat, lon, {});
                } else {
                    workQueue = new jQuery.Deferred();
                }

                workQueue.done(function(data) {
                    hideAllPolygons();
                    mapInfoWindow.close();
                    selectedDistrict = null;
                    var smallestAreaSchool = null;
                    var smallestArea = 9999999;
                    var showFirstDistrict = true;
                    for (var x=0; x < data.topLevel.length; x++) {
                        var obj = data.topLevel[x];
                        if (obj.isSchool() && obj.hasPolygon()) {
                            if (obj.area < smallestArea)  {
                                smallestAreaSchool = obj;
                                smallestArea = obj.area;
                            }
                        } else if (obj.isDistrict() && obj.hasPolygon() && showFirstDistrict) {
                            obj.showPolygon();
                            showFirstDistrict = false;
                            GS.Map.Helper.highlightPolygon(obj.polygon, {duration:600});
                            hideSchoolsOutsideOfDistrict(obj);
                        }
                    }
                    if (smallestAreaSchool != null) {
                        smallestAreaSchool.showPolygon();
                        GS.Map.Helper.highlightPolygon(smallestAreaSchool.polygon, {duration:600});
                    }
                    updateDistrictList();
                    updateSchoolList();
                    updateDebugListeners();
                    showInfoWindowForSelectedSchool();
                }
                ).always(function() {
                            if (showPrivateSchools()) {
                                loadPrivateSchoolsNearPoint(lat, lon);
                            }
                        }
                );
                if (!showPublicSchools()) {
                    workQueue.resolve({topLevel:[]});
                }
            };
            var loadSchoolsForLocationEventHandler = function(event) {
                if (event.latLng) {
                    loadSchoolsServingLocation(event.latLng.lat(), event.latLng.lng());
                }
            };
            var updateDebugListeners = function() {
                for (var x=0; x < mapClickListeners.length; x++) {
                    google.maps.event.removeListener(mapClickListeners[x]);
                }
                mapClickListeners = new Array();
                var myClickHandler;
                if ($('.js_mapClickBehavior:checked').val() == 'loadDistrict') {
                    myClickHandler = loadDistrictsForLocationEventHandler;
                } else {
                    myClickHandler = loadSchoolsForLocationEventHandler;
                }
                // clicking on map or a polygon triggers the selected click event (but not markers -- they have their own event)
                mapClickListeners.push(google.maps.event.addListener(districtBoundaryMap, 'click', myClickHandler));
                for (var key in stuffOnMap) {
                    if (stuffOnMap.hasOwnProperty(key)) {
                        if (stuffOnMap[key].hasPolygon()) {
                            mapClickListeners.push(google.maps.event.addListener(stuffOnMap[key].polygon, 'click', myClickHandler));
                        }
                    }
                }
            };
            var updateDistrictList = function() {
                var districtListDiv = $('#districtList');
                districtListDiv.empty();
                var districts = new Array();
                for (var key in stuffOnMap) {
                    if (stuffOnMap.hasOwnProperty(key)) {
                        if (stuffOnMap[key].isDistrict() && stuffOnMap[key].isMarkerShown()) {
                            districts.push(stuffOnMap[key]);
                        }
                    }
                }
                // sort on district rating
                districts.sort(GS.Util.sortByRating);
                var htmlString = '<option value="">Select a district</option>';
                for (var districtIndex = 0; districtIndex < districts.length; districtIndex++) {
                    var district = districts[districtIndex];
                    var districtKey = "district-" + district.state + "-" + district.id;
                    var districtRating = 'na';
                    var selected = '';
                    if (district.isPolygonShown()) {
                        selected = ' selected="selected"';
                    }
                    var li = '<option value="' + districtKey + '"' + selected + '>' + district.name;
                    if (district.rating > 0 && district.rating < 11) {
                        li += ' (' + district.rating + ')';
                    } else {
                        li += ' (N/A)'
                    }
                    li += '</option>';
                    htmlString += li;
                }
                districtListDiv.append(htmlString);
            };
            var updateSchoolList = function() {
                var schoolListDiv = $('#schoolList');
                schoolListDiv.empty();
                var schools = new Array();
                for (var key in stuffOnMap) {
                    if (stuffOnMap.hasOwnProperty(key)) {
                        if (stuffOnMap[key].isSchool() && stuffOnMap[key].isMarkerShown()) {
                            schools.push(stuffOnMap[key]);
                        }
                    }
                }
                // sort on school rating
                schools.sort(GS.Util.sortByRating);
                var mySelectedSchool = null;
                var htmlString = '';
                for (var schoolIndex = 0; schoolIndex < schools.length; schoolIndex++) {
                    var school = schools[schoolIndex];
                    var schoolKey = "school-" + school.state + "-" + school.id;
                    var schoolRating = 'na';
                    var selected = '';
                    if (school.isPolygonShown()) {
                        selected = ' class="selected"';
                        mySelectedSchool = school;
                    } else if (mySelectedSchool == null && school == selectedSchool) {
                        selected = ' class="selected"';
                        mySelectedSchool = school;
                    }
                    var li = '<li id="' + schoolKey + '"' + selected + '>' + school.name + ' ';
                    li += '<span class="sprite badge_sm_';
                    if (school.rating > 0 && school.rating < 11) {
                        li += school.rating
                    } else if (school.schoolType == 'private') {
                        li += 'pr';
                    } else {
                        li += 'na';
                    }
                    li += '_b';
                    li += '"><!-- do not collapse --></span>';
                    li += '</li>';
                    htmlString += li;
                }
                schoolListDiv.append(htmlString);
                if (schools.length > 0) {
                    $('#schoolListWrapper').show();
                }
                if (mySelectedSchool != null) {
                    mySelectedSchool = $('#' + mySelectedSchool.getKey());
                    if (mySelectedSchool.position() != null && isScrolledIntoView(mySelectedSchool, $('#schoolListDiv')) === false) {
                        var scrollTop = $('#schoolListDiv').scrollTop();
                        $('#schoolListDiv').scrollTop(scrollTop + mySelectedSchool.position().top);
                    }
                } else {
                    $('#schoolListDiv').scrollTop(0);
                }
            };
            var geocodeAddressSuccess = function(geocodeResults) {
                if (geocodeResults.length == 0) {
                    alert("Cannot determine location for '" + searchInput + "'");
                } else {
                    // ignore multiple results for now
                    geocodeResults[0]['totalResults'] = geocodeResults.length;
                    clearMap();
                    GS.Boundaries.boundaryHelper.loadDistrictsNearPointAjax(geocodeResults[0]['lat'],
                                                                            geocodeResults[0]['lon']
                    ).always(function() {
                        updateDistrictList();
                        loadSchoolsServingLocation(geocodeResults[0]['lat'], geocodeResults[0]['lon']);
                    });
                    centerMap(new google.maps.LatLng(geocodeResults[0]['lat'], geocodeResults[0]['lon']), {moveMarker:true});
                }
            };
            var loadPrivateSchoolsNearPoint = function(myLat, myLon) {
                hidePrivateSchools();
                GS.Boundaries.boundaryHelper.loadPrivateSchoolsNearPoint(myLat, myLon
                ).done(function(data) {
                    updateSchoolList();
                });
            };
            var loadDistrictsNearPoint = function(myLat, myLon) {
                // drop unneeded precision
                var lat = Math.round(myLat * 1000000)/1000000;
                var lon = Math.round(myLon * 1000000)/1000000;
                if (typeof(window.History) !== 'undefined' && window.History.enabled === true) {
                    // use HTML 5 history API to rewrite the current URL to represent the new state.
                    window.History.replaceState(null, document.title, '?lat=' + lat + '&lon=' + lon + '&level=' + $('.js_mapLevelCode:checked').val());
                }

                if (districtBoundaryMap == null) {
                    var latLng = new google.maps.LatLng(lat, lon);
                    initMap(latLng);
                }
                clearMap();
                return GS.Boundaries.boundaryHelper.loadDistrictsNearPointAjax(lat, lon
                ).done(function(data) {
                    updateDistrictList();
                });
            };
            jQuery(document).ajaxStart(function() {
                $('#js_loading').show();
            });
            jQuery(document).ajaxStop(function() {
                $('#js_loading').hide();
            });
            jQuery(function () {
                GS.Boundaries.boundaryHelper.setGlobalResponseHandler(storeData);
                var params = GS.Util.getUrlVars();
                if (params.lat && params.lon) {
                    loadDistrictsNearPoint(params.lat, params.lon);
                } else {
                    loadDistrictsNearPoint(37.790948, -122.3942572).done(function() {
                        navigator.geolocation.getCurrentPosition(function(pos) {
                            loadDistrictsNearPoint(pos.coords.latitude, pos.coords.longitude);
                        });
                    });
                }

                $('#js_reloadMap').on('click', function() {
                    loadDistrictsNearPoint(districtBoundaryMap.getCenter().lat(),
                                           districtBoundaryMap.getCenter().lng()
                    ).always(function () {
                                if (showPrivateSchools()) {
                                    loadPrivateSchoolsNearPoint(districtBoundaryMap.getCenter().lat(),
                                            districtBoundaryMap.getCenter().lng());
                                }
                            }
                    );
                });
                $('#js_clearPolygons').on('click', hideAllPolygons);
                $('#js_clearAll').on('click', clearMap);
                $('#js_drawAllDistricts').on('click', function() {
                    var districtQueue = new jQuery.Deferred();
                    var nextQueue = null;
                    for (var key in stuffOnMap) {
                        if (stuffOnMap.hasOwnProperty(key) && stuffOnMap[key].isDistrict()) {
                            var district = stuffOnMap[key];
                            if (!district.isPolygonShown()) {
                                if (district.hasPolygon()) {
                                    district.showPolygon();
                                } else {
                                    if (nextQueue == null) {
                                        nextQueue = new jQuery.Deferred();
                                        districtQueue.done(loadDistrictBoundaryFunc(district, nextQueue));
                                    } else {
                                        var newQueue = new jQuery.Deferred();
                                        nextQueue.done(loadDistrictBoundaryFunc(district, newQueue));
                                        nextQueue = newQueue;
                                    }
                                }
                            }
                        }
                    }
                    districtQueue.resolve(); // start the cascade
                    updateDistrictList();
                    updateDebugListeners();
                });
                var loadDistrictBoundaryFunc = function(district, deferred) {
                    return function() {
                        GS.Boundaries.boundaryHelper.getDistrictBoundaryByIdAjax(district.state, district.id, district.name
                        ).done(function() {
                            updateDistrictList();
                            updateDebugListeners();
                        }).always(function() {
                            deferred.resolve();
                        });
                    };
                };
                $('.js_mapLevelCode').on('change', function() {
                    clearMap();
                    loadDistrictsNearPoint(districtBoundaryMap.getCenter().lat(),
                                           districtBoundaryMap.getCenter().lng()
                    ).always(function() {
                                if (showPrivateSchools()) {
                                    loadPrivateSchoolsNearPoint(districtBoundaryMap.getCenter().lat(),
                                                                districtBoundaryMap.getCenter().lng());
                                }
                            }
                    );
                });
                $('.js_mapClickBehavior').on('change', updateDebugListeners);
                $('#js_schoolType_private').on('change', function() {
                    if (showPrivateSchools()) {
                        loadPrivateSchoolsNearPoint(districtBoundaryMap.getCenter().lat(),
                                                    districtBoundaryMap.getCenter().lng())
                    } else {
                        hidePrivateSchools();
                        updateSchoolList();
                    }
                });
                $('#js_schoolType_public').on('change', function() {
                    if (!showPublicSchools()) {
                        hideSchoolsWithDistrict();
                        updateSchoolList();
                    }
                });
                $('#districtList').on('change', function() {
                    var key = $(this).val();
                    if (typeof(stuffOnMap[key]) !== 'undefined' && key != '') {
                        districtClickHandler(stuffOnMap[key], {center:true});
                    }
                });
                $('#schoolList').on('click', 'li', function() {
                    var key = $(this).attr('id');
                    if (typeof(stuffOnMap[key]) !== 'undefined') {
                        schoolClickHandler(stuffOnMap[key], {center:true});
                    }
                });
                $('#searchLocationForm').on('submit', function() {
                    GS.Map.Helper.geocodeAddress($('#js_mapAddressQuery').val(), geocodeAddressSuccess);
                    return false;
                });
                updateDebugListeners();
            });
        })();
        ]]>
    </script>

</head>
<gsml:body adPageName="districtBoundary" pageLayout="leftside">
    <div class="leftSide fltlft">
        <h3>School &amp; District Map Tool</h3>
        <div>
            <p>Show on map:</p>
            <gsml:checkbox name="schoolType_public" styleId="js_schoolType_public" checked="${true}"/>
            <label for="js_schoolType_public">Public/Charter schools (in district)</label>
            <br/>
            <gsml:checkbox name="schoolType_private" styleId="js_schoolType_private" checked="${false}"/>
            <label for="js_schoolType_private">Private schools (not part of district)</label>
        </div>
        <div>
            <p>Filter by grade:</p>
            <gsml:radio name="level_code" styleClass="js_mapLevelCode" styleId="mapLevelCode_e" value="e" checked="${empty param.level or param.level == 'e'}"/>
            <label for="mapLevelCode_e">Elementary</label>
            <gsml:radio name="level_code" styleClass="js_mapLevelCode" styleId="mapLevelCode_m" value="m" checked="${param.level == 'm'}"/>
            <label for="mapLevelCode_m">Middle</label>
            <gsml:radio name="level_code" styleClass="js_mapLevelCode" styleId="mapLevelCode_h" value="h" checked="${param.level == 'h'}"/>
            <label for="mapLevelCode_h">High</label>
        </div>
        <div class="js_showWithMap hidden">
            <div id="districtListDiv">
                <p>Nearby districts:</p>
                <select id="districtList"><!-- not empty --></select>
            </div>
            <div id="schoolListWrapper" class="hidden">
                <div>Schools:</div>
                <div id="schoolListDiv">
                    <ul id="schoolList"><!-- not empty --></ul>
                </div>
            </div>
        </div>
    </div>
    <div class="rightSide fltrt">
        <div class="">
            <form action="" id="searchLocationForm" onsubmit="return false;">
                <label class="searchLocationLabel" for="js_mapAddressQuery">Search location:</label>
                <input type="text" name="addressQuery" id="js_mapAddressQuery"/>
                <button type="submit" name="loadAddress" id="js_loadAddress">Search</button>
            </form>
        </div>
        <div class="js_showWithMap hidden">
            <div id="map-wrapper">
                <div id="map-canvas"><!-- not empty --></div>
                <div id="js_loading" class="hidden">Loading ...</div>
            </div>
            <button name="reload" id="js_reloadMap">Reload at this location</button>
            <button name="clearAll" id="js_clearAll">Debug: Clear All</button>
            <button name="clearPolygons" id="js_clearPolygons">Debug: Clear Polygons</button>
            <button name="drawAllDistricts" id="js_drawAllDistricts" class="">Debug: Draw all districts</button>
            <button name="getSAZ" id="js_getSAZ" class="hidden">Debug: Load SAZ for selected district</button>
            <button name="drawAllDistrictsAndSAZ" id="js_drawAllDistrictsAndSAZ" class="hidden">Debug: Draw all districts and SAZ (Warning!)</button>
            <div class="options hidden">
                Map click behavior:
                <input type="radio" name="mapClickBehavior" class="js_mapClickBehavior" id="mapClickLoadSchool" value="loadSchool" checked="checked"/><label for="mapClickLoadSchool">Show Boundaries</label>
                <input type="radio" name="mapClickBehavior" class="js_mapClickBehavior" id="mapClickLoadDistrict" value="loadDistrict"/><label for="mapClickLoadDistrict">Show Only District Boundary</label>
            </div>
        </div>
        <div class="hidden">
            <div id="boundaryMapDistrictInfoWindow">
                <div class="line">
                    <div class="unit size6of7">
                        <div class="js_name"><!-- not empty --></div>
                        <div class="js_address"><!-- not empty --></div>
                    </div>
                    <div class="unit size1of7 lastUnit">
                        <div class="js_rating"><!-- not empty --></div>
                    </div>
                </div>
            </div>
            <div id="boundaryMapSchoolInfoWindow">
                <div class="line">
                    <div class="unit size6of7">
                        <div class="js_name"><!-- not empty --></div>
                        <div class="js_address"><!-- not empty --></div>
                    </div>
                    <div class="unit size1of7 lastUnit">
                        <div class="js_rating"><!-- not empty --></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div style="display:none;">
        <mod:tracking pageName="Attendance Zones" hier1="TBD"/>
    </div>
</gsml:body>
</html>
</jsp:root>