<?xml version="1.0" encoding="UTF-8"?>
<jsp:root xmlns:jsp="http://java.sun.com/JSP/Page"
          xmlns="http://www.w3.org/1999/xhtml"
          xmlns:gsml="urn:jsptagdir:/WEB-INF/tags/gsml"
          xmlns:pageHelper="urn:jsptagdir:/WEB-INF/tags/pageHelper"
          version="2.0" >
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
<jsp:directive.page contentType="text/html"/>
<jsp:output doctype-root-element="html"
            doctype-public="-//W3C//DTD XHTML 1.0 Transitional//EN"
            doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"/>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>GeoJson - Drawing district boundaries</title>
    <style type="text/css">
        div.leftSide {
            width: 233px;
        }
        div.rightSide {
            width: 720px;
        }
        .searchLocationLabel {
            margin-left: 15px;
        }
        #districtListDiv {
            height: 350px;
            overflow-y: scroll;
            border: 1px solid;
        }
        #districtList li {
            margin-bottom: 3px;
            list-style: disc inside;
            background-color: #ddd;
            font-size: 12px;
            padding: 1px;
        }
        #districtList li.selected {
            border: 1px solid red;
            padding: 0;
        }
        #schoolListDiv {
            height: 350px;
            overflow-y: scroll;
            border: 1px solid;
        }
        #schoolList li {
            margin-bottom: 3px;
            list-style: disc inside;
            background-color: #ddd;
            font-size: 12px;
            padding: 1px;
        }
        #schoolList li.selected {
            border: 1px solid red;
            padding: 0;
        }
        #map-canvas{
            width:700px;
            height:500px;
            border:2px solid #999;
        }
    </style>

    <pageHelper:externalJavascript file="/res/js/history.min.js"/>
    <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"><!-- no collapse --></script>
    <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"><!-- no collapse --></script>

    <script type="text/javascript">
        <![CDATA[

        Array.prototype.contains = function(obj) {
          var i = this.length;
          while (i--) {
            if (this[i] === obj) {
              return true;
            }
          }
          return false;
        };
        var GS = GS || {};
        GS.Boundaries = GS.Boundaries || {};

        GS.Boundaries.BoundaryHelper = function() {
            var districtBoundaryMap;
            var districtMarkers = new Array();
            var schoolMarkers = new Array();
            var polygons = new Array();
            var stuffOnMap = {};
            var selectedDistrict = null;

            var MarkerWithBoundary = function() {
                this.marker = null;
                this.polygon = null;
                this.state = null;
                this.id = null;
                this.name = null;
                this.rating = 0;
                this.showOnLoad = false;
                this.centerOnLoad = false;
                this.centroid = {};

                this.init = function(params) {
                    this.state = params.state;
                    this.id = params.id;
                    this.name = params.name;
                };
                this.isDistrict = function() {return false;};
                this.isSchool = function() {return false;};
                this.isMarkerShown = function() {
                    return this.marker != null && this.marker.getMap() != null;
                };
                this.hideMarker = function() {
                    this.marker.setMap(null);
                };
                this.showMarker = function() {
                    this.marker.setMap(districtBoundaryMap);
                };
                this.hasPolygon = function() {
                    return this.polygon != null;
                };
                this.isPolygonShown = function() {
                    return this.polygon != null && this.polygon.getMap() != null;
                };
                this.showPolygon = function() {
                    if (this.hasPolygon() && !this.isPolygonShown()) {
                        this.polygon.setMap(districtBoundaryMap);
                        this.showPolygonImpl();
                    }
                };
                this.hidePolygon = function() {
                    if (this.isPolygonShown()) {
                        this.polygon.setMap(null);
                        this.hidePolygonImpl();
                    }
                };
                this.togglePolygon = function() {
                    if (this.isPolygonShown()) {
                        this.hidePolygon();
                    } else {
                        this.loadAndShowPolygon();
                    }
                };
                this.centerMap = function() {
                    if (typeof(this.centroid.lat) !== 'undefined' && typeof(this.centroid.lon) !== 'undefined') {
                        districtBoundaryMap.panTo(new google.maps.LatLng(this.centroid.lat, this.centroid.lon));
                    } else if (this.isMarkerShown()) {
                        districtBoundaryMap.panTo(this.marker.getPosition());
                    }
                }
            };
            var DistrictWithBoundary = function(params) {
                this.schools = new Array();

                this.init(params);
                this.loadSchools = function() {
                    if (!this.hasSchools()) {
                        getSchoolsForDistrictAjax(this.state, this.id, this.name);
                    } else {
                        this.showSchools();
                    }
                };
                this.hasSchools = function() {
                    return this.schools.length > 0;
                };
                this.showSchools = function() {
                    updateSchoolList(this.schools);
                    for (var x=0; x < this.schools.length; x++) {
                        this.schools[x].showMarker();
                    }
                };
                this.hideSchools = function() {
                    for (var x=0; x < this.schools.length; x++) {
                        this.schools[x].hideMarker();
                    }
                };
                this.loadPolygon = function() {
                    if (!this.hasPolygon()) {
                        getDistrictBoundaryAjax(this.state, this.id, this.name);
                    }
                };
                this.loadAndShowPolygon = function() {
                    if (!this.hasPolygon()) {
                        this.showOnLoad = true;
                        getDistrictBoundaryAjax(this.state, this.id, this.name);
                    } else if (!this.isPolygonShown()) {
                        this.showPolygon();
                    }
                };
                this.showPolygonImpl = function() {
                    $('#districtList li').removeClass("selected");
                    $('#' + this.getKey()).addClass("selected");
                    selectedDistrict = this;
                    $('#currentlySelectedDistrict').html(this.name);
                };
                this.hidePolygonImpl = function() {
                    $('#' + this.getKey()).removeClass("selected");
                    $('#currentlySelectedDistrict').html('');
                    selectedDistrict = null;
                    this.hideSchools();
                };
                this.getKey = function() {
                    return "district-" + this.state + "-" + this.id;
                };
                this.isDistrict = function() {return true;};
            };
            DistrictWithBoundary.prototype = new MarkerWithBoundary();
            var SchoolWithBoundary = function(params) {
                this.init(params);
                this.loadPolygon = function() {
                    if (this.hasPolygon()) {
                        this.showPolygon();
                    } else {
                        // ?
                    }
                };
                this.loadPolygon = function() {
                    if (!this.hasPolygon()) {
                        getSchoolBoundaryAjax(this.state, this.id, this.name);
                    }
                };
                this.loadAndShowPolygon = function() {
                    if (!this.hasPolygon()) {
                        this.showOnLoad = true;
                        getSchoolBoundaryAjax(this.state, this.id, this.name);
                    } else if (!this.isPolygonShown()) {
                        this.showPolygon();
                    }
                };
                this.showPolygonImpl = function() {
                    $('#' + this.getKey()).addClass("selected");
                };
                this.hidePolygonImpl = function() {
                    $('#' + this.getKey()).removeClass("selected");
                };
                this.getKey = function() {
                    return "school-" + this.state + "-" + this.id;
                };
                this.isSchool = function() {return true;};
            };
            SchoolWithBoundary.prototype = new MarkerWithBoundary();

            var loadDistrictAroundPoint = function(latitude, longitude) {
                jQuery.getJSON("/geo/boundary/ajax/getDistrictContainingPoint.page", {lat:latitude, lon:longitude, level:$('.js_mapLevelCode:checked').val()}
                ).success(function(data) {
                      var polygon = createGeoJsonPolygon(data);
                      polygon.setMap(districtBoundaryMap);
                      polygons.push(polygon);
                }).error(function() {
                    alert("Error fetching district");
                });
            };
            var loadDistrictMap = function(latitude, longitude) {
                if (typeof(window.History) !== 'undefined' && window.History.enabled === true) {
                    // use HTML 5 history API to rewrite the current URL to represent the new state.
                    window.History.replaceState(null, document.title, '?lat=' + latitude + '&lon=' + longitude);
                }
                jQuery.getJSON("/geo/boundary/ajax/getDistrictsNearPoint.page", {lat:latitude, lon:longitude, level:$('.js_mapLevelCode:checked').val()}
                ).success(function(data) {
                      try {
                          drawMap(data.districts);
                          updateDistrictList(data.districts);
                      } catch (e) {
                          alert("Error: "+ e.message);
                      }
                }).error(function() {
                    alert("Error fetching district list");
                });
            };
            var clearMap = function() {
                for (var key in stuffOnMap) {
                    var thingOnMap = stuffOnMap[key];
                    thingOnMap.hideMarker();
                    thingOnMap.hidePolygon();
                    delete stuffOnMap[key];
                }
                $('#districtList').empty();
                $('#schoolList').empty();
            };
            var getLocation = function(pos) {
                var latitude = pos.coords.latitude;
                var longitude = pos.coords.longitude;
                loadDistrictMap(latitude, longitude);
            };
            var unknownLocation = function() {
                loadDistrictMap(37.790948, -122.3942572);
            };
            var drawMap = function(districtList) {
                var mapBounds = new google.maps.LatLngBounds();
                var setBounds = false;
                for (var districtIndex = 0; districtIndex < districtList.length; districtIndex++) {
                    var district = districtList[districtIndex];
                    var districtLatLng = new google.maps.LatLng(district.lat, district.lon);
                    if (districtBoundaryMap === undefined) {
                        initMap(districtLatLng);
                        setBounds = true;
                    }
                    var districtMarker = createDistrictMarker(district);
                    districtMarker.setMap(districtBoundaryMap);
                    districtMarkers.push(districtMarker);
                    mapBounds.extend(districtMarker.getPosition());

                    var districtOnMap = new DistrictWithBoundary({state:district.state, id:district.id, name:district.name});
                    districtOnMap.marker = districtMarker;
                    stuffOnMap["district-" + district.state + "-" + district.id] = districtOnMap;

                    google.maps.event.addListener(districtMarker, 'click', createDistrictMarkerClickListener(districtOnMap));
                }
                if (setBounds) {
                    // only change zoom if it is the initial load
                    districtBoundaryMap.fitBounds(mapBounds);
                }
            };
            var getDistrictBoundarySuccess = function(data) {
                var districtOnMap = stuffOnMap["district-" + data.state + "-" + data.districtId];
                if (districtOnMap.isPolygonShown()) {
                    districtOnMap.hidePolygon()
                }
                districtOnMap.polygon = createGeoJsonPolygon(data);
                if (districtOnMap.showOnLoad === true) {
                    districtOnMap.showPolygon();
                }
                if (typeof(data.centroid) !== 'undefined') {
                    districtOnMap.centroid = {lat: data.centroid.lat, lon: data.centroid.lon};
                    if (districtOnMap.centerOnLoad === true) {
                        districtOnMap.centerMap();
                    }
                }
            };
            var getSchoolBoundarySuccess = function(data) {
                var schoolOnMap = stuffOnMap["school-" + data.state + "-" + data.id];
                if (schoolOnMap.isPolygonShown()) {
                    schoolOnMap.hidePolygon()
                }
                schoolOnMap.polygon = createGeoJsonPolygon(data, '#66461F', '#78FF00');
                if (schoolOnMap.showOnLoad === true) {
                    schoolOnMap.showPolygon();
                }
                if (typeof(data.centroid) !== 'undefined') {
                    schoolOnMap.centroid = {lat: data.centroid.lat, lon: data.centroid.lon};
                    if (schoolOnMap.centerOnLoad === true) {
                        schoolOnMap.centerMap();
                    }
                }
            };
            var getSchoolBoundariesSuccess = function(data) {
                if (data.schoolBoundaries.length == 0) {
                    alert("No school attendance zones found");
                }
                try {

                for (var x=0; x < data.schoolBoundaries.length; x++) {
                    var schoolBoundary = data.schoolBoundaries[x];
                    var key = "school-" + schoolBoundary.state + "-" + schoolBoundary.id;
                    if (typeof(stuffOnMap[key]) === 'undefined') {
                        stuffOnMap[key] = new SchoolWithBoundary({state:schoolBoundary.state, id:schoolBoundary.id, name:schoolBoundary.name});
                    } else {
                        console.log("Duplicate school key: " + key);
                        stuffOnMap[key].hidePolygon();
                    }
                    stuffOnMap[key].polygon = createGeoJsonPolygon(schoolBoundary, '#66461F', '#78FF00');
                    stuffOnMap[key].showPolygon();
                }
                } catch (e) {
                    alert("Error:" + e + "; " + e.message);
                }
            };
            var getSchoolsSuccess = function(data) {
                if (data.schools.length == 0) {
                    alert("No schools found");
                }
                var districtKey = "district-" + data.state + "-" + data.districtId;
                var district = stuffOnMap[districtKey];
                for (var x=0; x < data.schools.length; x++) {
                    var school = data.schools[x];
                    var key = "school-" + school.state + "-" + school.id;
                    if (typeof(stuffOnMap[key]) === 'undefined') {
                        stuffOnMap[key] = new SchoolWithBoundary({state:school.state, id:school.id, name:school.name});
                    } else {
                        console.log("Duplicate school key: " + key);
                    }
                    var schoolMarker = createSchoolMarker(school);
                    schoolMarker.setMap(districtBoundaryMap);
                    schoolMarkers.push(schoolMarker);
                    stuffOnMap[key].marker = schoolMarker;
                    district.schools.push(stuffOnMap[key]);
                    google.maps.event.addListener(schoolMarker, 'click', createSchoolMarkerClickListener(stuffOnMap[key]));
                }
                updateSchoolList(data.schools);
            };
            var getDistrictBoundaryAjax = function(state, id, name) {
                jQuery.getJSON(
                        "/geo/boundary/ajax/getDistrictBoundary.page",
                        {state:state, id:id, level:$('.js_mapLevelCode:checked').val()}
                ).success(getDistrictBoundarySuccess
                ).error(function() {
                    alert("Error fetching district boundary: " + name + " (" + state + ":" + id + ")");
                });
            };
            var getSchoolBoundaryAjax = function(state, id, name) {
                jQuery.getJSON(
                        "/geo/boundary/ajax/getSchoolBoundary.page",
                        {state:state, id:id, level:$('.js_mapLevelCode:checked').val()}
                ).success(getSchoolBoundarySuccess
                ).error(function(event) {
                    if (event.status == 404) {
                        alert("No school boundary found: " + name + " (" + state + ":" + id + ")");
                    } else {
                        alert("Error fetching school boundary: " + name + " (" + state + ":" + id + ")");
                    }
                });
            };
            var getSchoolBoundariesForDistrictAjax = function(state, id, name) {
                jQuery.getJSON(
                        "/geo/boundary/ajax/getSchoolBoundariesForDistrict.page",
                        {state:state, districtId:id, level:$('.js_mapLevelCode:checked').val()}
                ).success(getSchoolBoundariesSuccess
                ).error(function() {
                    alert("Error fetching school boundaries for district: " + name + " (" + state + ":" + id + ")");
                });
            };
            var getSchoolsForDistrictAjax = function(state, id, name) {
                jQuery.getJSON(
                        "/geo/boundary/ajax/getSchoolsForDistrict.page",
                        {state:state, districtId:id, level:$('.js_mapLevelCode:checked').val()}
                ).success(getSchoolsSuccess
                ).error(function() {
                    alert("Error fetching school list for district: " + name + " (" + state + ":" + id + ")");
                });
            };
            var createDistrictMarkerClickListener = function(districtOnMap) {
                return function() {
                    districtClickHandler(districtOnMap);
                };
            };
            var createSchoolMarkerClickListener = function(schoolOnMap) {
                return function() {
                    schoolClickHandler(schoolOnMap);
                };
            };
            var districtClickHandler = function(district) {
                district.centerOnLoad = true;
                if (!district.isPolygonShown()) {
                    hideAllPolygons();
                    district.loadAndShowPolygon();
                    district.loadSchools();
                }
                district.centerMap();
            };
            var schoolClickHandler = function(school) {
                school.centerOnLoad = true;
                if (!school.isPolygonShown()) {
                    if (school.hasPolygon()) {
                        school.centerMap();
                    }
                    school.loadAndShowPolygon();
                } else {
                    school.hidePolygon();
                }
            };
            var hideAllPolygons = function() {
                for (var key in stuffOnMap) {
                    stuffOnMap[key].hidePolygon();
                }
            };
            var initMap = function(center) {
                districtBoundaryMap = new google.maps.Map(document.getElementById('map-canvas'), {
                    zoom: 12,
                    center: center,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                });
                $('.js_showWithMap').show();
            };
            var createDistrictMarker = function(district) {
                var icon = '/res/img/map/GS_gsr_na_forground.png';
                if (district.rating > 0 && district.rating < 11) {
                    icon = '/res/img/map/GS_gsr_' + district.rating + '_forground.png';
                }
                var markerImage = new google.maps.MarkerImage(icon, new google.maps.Size(40,40),
                                                              new google.maps.Point(0,0), new google.maps.Point(11,34));
                var markerShadow = new google.maps.MarkerImage('/res/img/map/GS_gsr_1_backgroundshadow.png',
                                                               new google.maps.Size(40, 40),
                                                               new google.maps.Point(0, 0),
                                                               new google.maps.Point(11, 34));
                var markerShape = {
                    coord: [0, 0, 30, 0, 30, 37, 0, 37],
                    type: 'poly'
                };
                return new google.maps.Marker
                        ({
                             position: new google.maps.LatLng(district.lat, district.lon),
                             title:district.name,
                             icon:markerImage,
                             shadow:markerShadow,
                             shape:markerShape
                         });
            };
            var createSchoolMarker = function(school) {
                var icon = '/res/img/map/GS_gsr_na_forground.png';
                if (school.rating > 0 && school.rating < 11) {
                    icon = '/res/img/map/GS_gsr_' + school.rating + '_forground.png';
                }
                var markerImage = new google.maps.MarkerImage(icon, new google.maps.Size(40,40),
                                                              new google.maps.Point(0,0), new google.maps.Point(11,34));
                var markerShadow = new google.maps.MarkerImage('/res/img/map/GS_gsr_1_backgroundshadow.png',
                                                               new google.maps.Size(40, 40),
                                                               new google.maps.Point(0, 0),
                                                               new google.maps.Point(11, 34));
                var markerShape = {
                    coord: [0, 0, 30, 0, 30, 37, 0, 37],
                    type: 'poly'
                };
                return new google.maps.Marker
                        ({
                             position: new google.maps.LatLng(school.lat, school.lon),
                             title:school.name,
                             icon:markerImage,
                             shadow:markerShadow,
                             shape:markerShape
                         });
            };
            var createGeoJsonPolygon = function(geojson, fillColor, strokeColor){
                fillColor = typeof(fillColor) !== 'undefined' ? fillColor : '#46461F';
                strokeColor = typeof(strokeColor) !== 'undefined' ? strokeColor : '#FF7800';
                var coords = geojson.coordinates;
                var paths = [];
                for (var i=0;i < coords.length;i++){
                    for (var j=0;j<coords[i].length;j++){
                        var path=[];
                        for (var k=0;k<coords[i][j].length;k++){
                            var ll = new google.maps.LatLng(coords[i][j][k][1],coords[i][j][k][0]);
                            path.push(ll);
                        }
                        paths.push(path);
                    }
                }
                return new google.maps.Polygon({
                    paths: paths,
                    strokeColor: strokeColor,
                    strokeOpacity: 1,
                    strokeWeight: 2,
                    fillColor: fillColor,
                    fillOpacity: 0.25
                });
            };
            var getUrlVars = function() {
                var vars = {};
                var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {
                    vars[key] = value;
                });
                return vars;
            };
            var updateDistrictList = function(districts) {
                var districtListDiv = $('#districtList');
                districtListDiv.empty();
                // sort on district rating
                districts.sort(function(a,b) {
                    if (a.rating > 0 && a.rating < 11 && b.rating > 0 && b.rating < 11) {
                        return b.rating - a.rating;
                    } else if (a.rating > 0 && a.rating < 11) {
                        return -1;
                    }
                    return 1;
                });
                for (var districtIndex = 0; districtIndex < districts.length; districtIndex++) {
                    var district = districts[districtIndex];
                    var districtKey = "district-" + district.state + "-" + district.id;
                    var districtRating = 'na';
                    var li = '<li id="' + districtKey + '">' + district.name + ' ';
                    li += '<span class="sprite badge_sm_';
                    if (district.rating > 0 && district.rating < 11) {
                        li += district.rating
                    } else {
                        li += 'na'
                    }
                    li += '_b';
                    li += '"><!-- do not collapse --></span>';
                    li += '</li>';
                    districtListDiv.append(li);
                }
            };
            var updateSchoolList = function(schools) {
                var schoolListDiv = $('#schoolList');
                schoolListDiv.empty();
                // sort on school rating
                // TODO
                for (var schoolIndex = 0; schoolIndex < schools.length; schoolIndex++) {
                    var school = schools[schoolIndex];
                    var schoolKey = "school-" + school.state + "-" + school.id;
                    var schoolRating = 'na';
                    var li = '<li id="' + schoolKey + '">' + school.name + ' ';
                    li += '<span class="sprite badge_sm_';
                    if (school.rating > 0 && school.rating < 11) {
                        li += school.rating
                    } else {
                        li += 'na'
                    }
                    li += '_b';
                    li += '"><!-- do not collapse --></span>';
                    li += '</li>';
                    schoolListDiv.append(li);
                }
            };
            var geocodeAddress = function(searchInput) {
                var geocoder = new google.maps.Geocoder();
                if (geocoder && searchInput) {
                    geocoder.geocode({ 'address': searchInput + ' US'}, function(results, status) {
                        var numResults = 0;
                        var GS_geocodeResults = new Array();
                        if (status == google.maps.GeocoderStatus.OK && results.length > 0) {
                            numResults = results.length;
                            for (var x = 0; x < numResults; x++) {
                                var geocodeResult = new Array();
                                geocodeResult['lat'] = results[x].geometry.location.lat();
                                geocodeResult['lon'] = results[x].geometry.location.lng();
                                geocodeResult['normalizedAddress'] =results[x].formatted_address;
                                geocodeResult['type'] = results[x].types.join();
                                if (results[x].partial_match) {
                                    geocodeResult['partial_match'] = true;
                                } else {
                                    geocodeResult['partial_match'] = false;
                                }
                                for (var i = 0; i < results[x].address_components.length; i++) {
                                    if (results[x].address_components[i].types.contains('administrative_area_level_1')) {
                                        geocodeResult['state'] = results[x].address_components[i].short_name;
                                    }
                                    if (results[x].address_components[i].types.contains('country')) {
                                        geocodeResult['country'] = results[x].address_components[i].short_name;
                                    }
                                }
                                // http://stackoverflow.com/questions/1098040/checking-if-an-associative-array-key-exists-in-javascript
                                if (!('lat' in geocodeResult && 'lon' in geocodeResult &&
                                        'state' in geocodeResult &&
                                        'normalizedAddress' in geocodeResult &&
                                        'country' in geocodeResult) ||
                                        geocodeResult['country'] != 'US') {
                                    geocodeResult = null;
                                }
                                if (geocodeResult != null) {
                                    GS_geocodeResults.push(geocodeResult);
                                }
                            }
                        }
                        if (GS_geocodeResults.length == 0) {
                            alert("Cannot determine location for '" + searchInput + "'");
                        } else if (GS_geocodeResults.length == 1) {
                            GS_geocodeResults[0]['totalResults'] = 1;
                            clearMap();
                            loadDistrictMap(GS_geocodeResults[0]['lat'],
                                            GS_geocodeResults[0]['lon']);
                            districtBoundaryMap.panTo(new google.maps.LatLng(GS_geocodeResults[0]['lat'], GS_geocodeResults[0]['lon']));
                        } else {
                            // ignore multiple results for now
                            GS_geocodeResults[0]['totalResults'] = GS_geocodeResults.length;
                            clearMap();
                            loadDistrictMap(GS_geocodeResults[0]['lat'],
                                            GS_geocodeResults[0]['lon]']);
                            districtBoundaryMap.panTo(new google.maps.LatLng(GS_geocodeResults[0]['lat'], GS_geocodeResults[0]['lon']));
                        }
                    });
                }
            };
            jQuery(function () {
                try {
                    var params = getUrlVars();
                    if (params.lat && params.lon) {
                        loadDistrictMap(params.lat, params.lon);
                    } else {
                        navigator.geolocation.getCurrentPosition(getLocation, unknownLocation);
                    }
                } catch (e) {
                    unknownLocation();
                }

                $('#js_reloadMap').click(function() {
                    clearMap();
                    loadDistrictMap(districtBoundaryMap.getCenter().lat(),
                                    districtBoundaryMap.getCenter().lng());
                });
                $('#js_drawAllDistricts').click(function() {
                    for (var key in stuffOnMap) {
                        stuffOnMap[key].loadAndShowPolygon();
                    }
                });
                $('#js_drawAllDistrictsAndSAZ').click(function() {
                    for (var key in stuffOnMap) {
                        if (key.indexOf('district') === 0) {
                            stuffOnMap[key].loadAndShowPolygon();
                            getSchoolBoundariesForDistrictAjax(stuffOnMap[key].state, stuffOnMap[key].id, stuffOnMap[key].name);
                        }
                    }
                });
                $('#js_drawContainingDistrict').click(function() {
                    loadDistrictAroundPoint(districtBoundaryMap.getCenter().lat(),
                                            districtBoundaryMap.getCenter().lng());
                });
                $('#js_getSAZ').click(function() {
                    if (selectedDistrict != null) {
                        getSchoolBoundariesForDistrictAjax(selectedDistrict.state, selectedDistrict.id, selectedDistrict.name);
                    }
                });
                $('.js_mapLevelCode').change(function() {
                    clearMap();
                    loadDistrictMap(districtBoundaryMap.getCenter().lat(),
                                    districtBoundaryMap.getCenter().lng());
                });
                $('#districtList').delegate("li", "click", function() {
                    var key = $(this).attr('id');
                    if (stuffOnMap[key] !== undefined) {
                        districtClickHandler(stuffOnMap[key]);
                    }
                });
                $('#schoolList').delegate("li", "click", function() {
                    var key = $(this).attr('id');
                    if (stuffOnMap[key] !== undefined) {
                        schoolClickHandler(stuffOnMap[key]);
                    }
                });
                $('#js_loadAddress').click(function() {
                    geocodeAddress($('#js_mapAddressQuery').val());
                });
            });
        };

        new GS.Boundaries.BoundaryHelper();
        ]]>
    </script>

</head>
<gsml:body adPageName="districtBoundary" pageLayout="leftside">
    <div class="leftSide fltlft">
        <h3>School &amp; District Map Tool</h3>
        <div class="js_showWithMap hidden">
            <div id="districtListDiv">
                <ul id="districtList"><!-- not empty --></ul>
            </div>
            <div>Currently selected district: <span id="currentlySelectedDistrict"><!-- no collapse --></span></div>
            <div id="schoolListDiv">
                Schools:
                <ul id="schoolList"><!-- not empty --></ul>
            </div>
        </div>
    </div>
    <div class="rightSide fltrt">
        <div class="">
            <input type="radio" name="level_code" class="js_mapLevelCode" id="mapLevelCode_e" value="e" checked="checked"/><label for="mapLevelCode_e">Elementary</label>
            <input type="radio" name="level_code" class="js_mapLevelCode" id="mapLevelCode_m" value="m"/><label for="mapLevelCode_m">Middle</label>
            <input type="radio" name="level_code" class="js_mapLevelCode" id="mapLevelCode_h" value="h"/><label for="mapLevelCode_h">High</label>
            <label class="searchLocationLabel" for="js_mapAddressQuery">Search location:</label>
            <input type="text" name="addressQuery" id="js_mapAddressQuery"/>
            <button name="loadAddress" id="js_loadAddress">Search</button>
        </div>
        <div class="js_showWithMap hidden">
            <div id="map-canvas"><!-- no collapse --></div>
            <button name="reload" id="js_reloadMap">Reload at this location</button>
            <button name="drawAllDistricts" id="js_drawAllDistricts">Debug: Draw all districts</button>
            <button name="getSAZ" id="js_getSAZ">Debug: Load SAZ for selected district</button>
            <button name="drawAllDistrictsAndSAZ" id="js_drawAllDistrictsAndSAZ">Debug: Draw all districts and SAZ (Warning!)</button>
            <button name="drawContainingDistrict" id="js_drawContainingDistrict">Debug: Draw Containing District</button>
        </div>
    </div>
</gsml:body>
</html>
</jsp:root>