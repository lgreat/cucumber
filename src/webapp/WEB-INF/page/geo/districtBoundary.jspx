<?xml version="1.0" encoding="UTF-8"?>
<jsp:root xmlns:jsp="http://java.sun.com/JSP/Page"
          xmlns="http://www.w3.org/1999/xhtml"
          xmlns:gsml="urn:jsptagdir:/WEB-INF/tags/gsml"
          xmlns:pageHelper="urn:jsptagdir:/WEB-INF/tags/pageHelper"
          version="2.0" >
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
<jsp:directive.page contentType="text/html"/>
<jsp:output doctype-root-element="html"
            doctype-public="-//W3C//DTD XHTML 1.0 Transitional//EN"
            doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"/>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>School Boundaries | GreatSchools</title>
    <style type="text/css">
        div.leftSide {
            width: 233px;
        }
        div.rightSide {
            width: 720px;
        }
        .searchLocationLabel {
            margin-left: 15px;
        }
        #districtListDiv {
            height: 350px;
            overflow-y: scroll;
            border: 1px solid;
            position: relative;
        }
        #districtList li {
            margin-bottom: 3px;
            list-style: disc inside;
            background-color: #ddd;
            font-size: 12px;
            padding: 1px;
        }
        #districtList li.selected {
            border: 1px solid red;
            padding: 0;
        }
        #schoolListDiv {
            height: 350px;
            overflow-y: scroll;
            border: 1px solid;
            position: relative;
        }
        #schoolList li {
            margin-bottom: 3px;
            list-style: disc inside;
            background-color: #ddd;
            font-size: 12px;
            padding: 1px;
        }
        #schoolList li.selected {
            border: 1px solid red;
            padding: 0;
        }
        #map-canvas{
            width:700px;
            height:500px;
            border:2px solid #999;
        }
    </style>

    <pageHelper:externalJavascript file="/res/js/history.min.js"/>
    <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"><!-- no collapse --></script>
    <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"><!-- no collapse --></script>

    <script type="text/javascript">
        <![CDATA[

        Array.prototype.contains = function(obj) {
          var i = this.length;
          while (i--) {
            if (this[i] === obj) {
              return true;
            }
          }
          return false;
        };
        function isScrolledIntoView(elem, parentElem) {
            // position should be between 0 and height. parentElem must be relatively positioned!
            var elemTop = $(elem).position().top;
            return elemTop > 0 && elemTop < $(parentElem).height();
        }
        var GS = GS || {};
        GS.Map = GS.Map || {};
        GS.Map.Helper = new (function() {
            this.highlightPolygon = function(polygon, options) {
                options = options || {};
                var duration = options.duration || 500;
                var strokeWeight = options.strokeWeight || 4;
                polygon.setOptions({strokeWeight:strokeWeight});
                setTimeout(function() {
                    polygon.setOptions({strokeWeight:2});
                }, duration);
            };
            this.createMarker = function(options) {
                var center = new google.maps.LatLng(options.center.latitude, options.center.longitude);
                var size = new google.maps.Size(options.size.width,options.size.height);
                var origin = undefined;
                if (options.origin) {
                    origin = new google.maps.Point(options.origin.x, options.origin.y);
                }
                var anchor = undefined;
                if (options.anchor) {
                    anchor = new google.maps.Point(options.anchor.x, options.anchor.y);
                }
                var markerImage = new google.maps.MarkerImage(options.url, size, origin, anchor);
                var markerShape = undefined;
                if (options.shape) {
                    markerShape = {
                        coord: options.shape.coord,
                        type: options.shape.type
                    }
                }
                var shadow = options.shadowUrl;
                if (options.shadow) {
                    shadow = new google.maps.MarkerImage(options.shadow.url, options.shadow.size,
                            options.shadow.origin, options.shadow.anchor);
                }
                return new google.maps.Marker
                        ({
                             position: center,
                             title:options.name,
                             icon:markerImage,
                             shape:markerShape,
                             shadow:shadow
                         });
            };
            this.createGoogleMapsPolygon = function(options){ // coordinates, zIndex, fillColor, strokeColor
                var coords = options.coordinates;
                var zIndex = options.zIndex || 1;
                var fillColor = options.fillColor || '#46461F';
                var strokeColor = options.strokeColor || '#FF7800';
                var paths = [];
                for (var i=0;i < coords.length;i++){
                    for (var j=0;j<coords[i].length;j++){
                        var path=[];
                        for (var k=0;k<coords[i][j].length;k++){
                            var ll = new google.maps.LatLng(coords[i][j][k][1],coords[i][j][k][0]);
                            path.push(ll);
                        }
                        paths.push(path);
                    }
                }
                return new google.maps.Polygon({
                    paths: paths,
                    strokeColor: strokeColor,
                    strokeOpacity: 1,
                    strokeWeight: 2,
                    fillColor: fillColor,
                    fillOpacity: 0.25,
                    zIndex: zIndex
                });
            };
            // requires Array.prototype.contains to be defined
            this.geocodeAddress = function(searchInput, callbackFunc) {
                var geocoder = new google.maps.Geocoder();
                if (geocoder && searchInput) {
                    geocoder.geocode({ 'address': searchInput + ' US'}, function(results, status) {
                        var numResults = 0;
                        var GS_geocodeResults = new Array();
                        if (status == google.maps.GeocoderStatus.OK && results.length > 0) {
                            numResults = results.length;
                            for (var x = 0; x < numResults; x++) {
                                var geocodeResult = new Array();
                                geocodeResult['lat'] = results[x].geometry.location.lat();
                                geocodeResult['lon'] = results[x].geometry.location.lng();
                                geocodeResult['normalizedAddress'] =results[x].formatted_address;
                                geocodeResult['type'] = results[x].types.join();
                                if (results[x].partial_match) {
                                    geocodeResult['partial_match'] = true;
                                } else {
                                    geocodeResult['partial_match'] = false;
                                }
                                for (var i = 0; i < results[x].address_components.length; i++) {
                                    if (results[x].address_components[i].types.contains('administrative_area_level_1')) {
                                        geocodeResult['state'] = results[x].address_components[i].short_name;
                                    }
                                    if (results[x].address_components[i].types.contains('country')) {
                                        geocodeResult['country'] = results[x].address_components[i].short_name;
                                    }
                                }
                                // http://stackoverflow.com/questions/1098040/checking-if-an-associative-array-key-exists-in-javascript
                                if (!('lat' in geocodeResult && 'lon' in geocodeResult &&
                                        'state' in geocodeResult &&
                                        'normalizedAddress' in geocodeResult &&
                                        'country' in geocodeResult) ||
                                        geocodeResult['country'] != 'US') {
                                    geocodeResult = null;
                                }
                                if (geocodeResult != null) {
                                    GS_geocodeResults.push(geocodeResult);
                                }
                            }
                        }
                        callbackFunc(GS_geocodeResults);
                    });
                }
            };
        })();

        GS.Boundaries = GS.Boundaries || {};
        GS.Boundaries.BoundaryHelper = new (function() {
            var districtBoundaryMap = null;
            var stuffOnMap = {};
            var selectedDistrict = null;
            var mapClickListeners = new Array();
            var centerMarker = null;
            var multiSelectDistrict = false;
            var multiSelectSchool = false;
            var mapInfoWindow = new google.maps.InfoWindow();

            // DATA STRUCTURES
            var MarkerWithBoundary = function() {
                this.marker = null;
                this.polygon = null;
                this.state = null;
                this.id = null;
                this.name = null;
                this.rating = 0;
                this.url = null;
                this.centerOnLoad = false;
                this.centroid = {};
                this.address = {};

                this.init = function(params) {
                    this.state = params.state;
                    this.id = params.id;
                    this.name = params.name;
                    if (typeof(params.rating) !== 'undefined') {
                        this.rating = params.rating;
                    }
                    this.url = params.url || null;
                    this.address = {};
                    if (params.address) {
                        this.address = params.address;
                    } else {
                        this.address.street1 = params.street1;
                        this.address.street2 = params.street2;
                        this.address.cityStateZip = params.cityStateZip;
                    }
                };
                this.isDistrict = function() {return false;};
                this.isSchool = function() {return false;};
                this.hasMarker = function() {
                    return this.marker != null;
                };
                this.isMarkerShown = function() {
                    return this.hasMarker() && this.marker.getMap() != null;
                };
                this.hideMarker = function() {
                    if (this.isMarkerShown()) {
                        this.marker.setMap(null);
                    }
                };
                this.showMarker = function() {
                    if (!this.isMarkerShown()) {
                        this.marker.setMap(districtBoundaryMap);
                    }
                };
                this.hasPolygon = function() {
                    return this.polygon != null;
                };
                this.isPolygonShown = function() {
                    return this.hasPolygon() && this.polygon.getMap() != null;
                };
                this.showPolygon = function() {
                    if (!this.isPolygonShown()) {
                        this.showPolygonImpl();
                        this.polygon.setMap(districtBoundaryMap);
                        updateDebugListeners(); // DEBUG
                    }
                };
                this.hidePolygon = function() {
                    if (this.isPolygonShown()) {
                        this.polygon.setMap(null);
                        this.hidePolygonImpl();
                    }
                };
                this.togglePolygon = function() {
                    if (this.isPolygonShown()) {
                        this.hidePolygon();
                    } else {
                        this.loadAndShowPolygon();
                    }
                };
                this.centerMap = function() {
                    if (typeof(this.centroid.lat) !== 'undefined' && typeof(this.centroid.lon) !== 'undefined') {
                        centerMap(new google.maps.LatLng(this.centroid.lat, this.centroid.lon));
                    } else if (this.isMarkerShown()) {
                        centerMap(this.marker.getPosition());
                    }
                }
            };
            var DistrictWithBoundary = function(params) {
                this.schools = new Array();

                this.init(params);
                this.loadSchools = function() {
                    this.showSchools();
                    getAllSchoolsForDistrictAjax(this.state, this.id, this.name);
                };
                this.hasSchools = function() {
                    return this.schools.length > 0;
                };
                this.showSchools = function() {
                    for (var x=0; x < this.schools.length; x++) {
                        this.schools[x].showMarker();
                    }
                    updateSchoolList();
                };
                this.hideSchools = function() {
                    for (var x=0; x < this.schools.length; x++) {
                        this.schools[x].hideMarker();
                        this.schools[x].hidePolygon();
                    }
                };
                this.loadAndShowPolygon = function() {
                    if (!this.hasPolygon()) {
                        getDistrictBoundaryByIdAjax(this.state, this.id, this.name);
                    } else if (!this.isPolygonShown()) {
                        this.showPolygon();
                    }
                };
                this.showPolygonImpl = function() {
                    if (!multiSelectDistrict) {
                        hideAllDistrictPolygons();
                    }
                    $('#' + this.getKey()).addClass("selected");
                    if ($('#' + this.getKey()).position() != null && isScrolledIntoView($('#' + this.getKey()), $('#districtListDiv')) === false) {
                        var scrollTop = $('#districtListDiv').scrollTop();
                        $('#districtListDiv').scrollTop(scrollTop + $('#' + this.getKey()).position().top);
                    }
                    selectedDistrict = this;
                    var nameHtml = '';
                    if (this.url != null) {
                        nameHtml += '<a href="' + this.url + '">'
                    }
                    nameHtml += this.name;
                    if (this.url != null) {
                        nameHtml += '</a>'
                    }
                    $('#currentlySelectedDistrict').html(nameHtml);
                };
                this.hidePolygonImpl = function() {
                    $('#' + this.getKey()).removeClass("selected");
                    $('#currentlySelectedDistrict').html('');
                    selectedDistrict = null;
                    this.hideSchools();
                };
                this.showInfoWindow = function() {
                    var infoWindowElement = $('#boundaryMapDistrictInfoWindow');
                    var nameLink = '<a href="' + this.url + '">' + this.name + '</a>';
                    infoWindowElement.find('.js_name').html(nameLink);
                    var ratingImg = '<span class="sprite badge_sm_';
                    if (this.rating > 0 && this.rating < 11) {
                        ratingImg += this.rating
                    } else {
                        ratingImg += 'na'
                    }
                    ratingImg += '"><!-- do not collapse --></span>';
                    infoWindowElement.find('.js_rating').html(ratingImg);
                    var addr = '';
                    if (this.address.street1) {
                        addr += this.address.street1 + '<br/>';
                    }
                    if (this.address.cityStateZip) {
                        addr += this.address.cityStateZip;
                    }
                    infoWindowElement.find('.js_address').html(addr);
                    mapInfoWindow.setContent(
                        '<div style="width:275px;">'+infoWindowElement.html()+'</div>'
                    );
                    mapInfoWindow.open(districtBoundaryMap, this.marker);
                };
                this.hideInfoWindow = function() {
                    mapInfoWindow.close();
                };
                this.setMarker = function(marker) {
                    this.hideMarker();
                    this.marker = marker;
                    google.maps.event.addListener(marker, 'click', createDistrictMarkerClickListener(this));
                };
                this.setPolygon = function(polygon) {
                    this.hidePolygon();
                    this.polygon = polygon;
                    polygon.setOptions({strokeColor:'#FF7800', zIndex:1});
                };
                this.getKey = function() {
                    return "district-" + this.state + "-" + this.id;
                };
                this.isDistrict = function() {return true;};
            };
            DistrictWithBoundary.prototype = new MarkerWithBoundary();
            var SchoolWithBoundary = function(params) {
                this.district = null;
                this.init(params);
                this.loadPolygon = function() {
                    if (!this.hasPolygon()) {
                        getSchoolBoundaryByIdAjax(this.state, this.id, this.name);
                    }
                };
                this.loadAndShowPolygon = function() {
                    if (!this.hasPolygon()) {
                        getSchoolBoundaryByIdAjax(this.state, this.id, this.name);
                    } else if (!this.isPolygonShown()) {
                        this.showPolygon();
                    }
                };
                this.showPolygonImpl = function() {
                    if (!multiSelectSchool) {
                        hideAllSchoolPolygons();
                    }
                    $('#' + this.getKey()).addClass("selected");
                };
                this.showInfoWindow = function() {
                    var infoWindowElement = $('#boundaryMapSchoolInfoWindow');
                    var nameLink = '<a href="' + this.url + '">' + this.name + '</a>';
                    infoWindowElement.find('.js_name').html(nameLink);
                    var ratingImg = '<span class="sprite badge_sm_';
                    if (this.rating > 0 && this.rating < 11) {
                        ratingImg += this.rating
                    } else {
                        ratingImg += 'na'
                    }
                    ratingImg += '"><!-- do not collapse --></span>';
                    infoWindowElement.find('.js_rating').html(ratingImg);
                    var addr = '';
                    if (this.address.street1) {
                        addr += this.address.street1 + '<br/>';
                    }
                    if (this.address.cityStateZip) {
                        addr += this.address.cityStateZip;
                    }
                    infoWindowElement.find('.js_address').html(addr);
                    mapInfoWindow.setContent(
                        '<div style="width:275px;">'+infoWindowElement.html()+'</div>'
                    );
                    mapInfoWindow.open(districtBoundaryMap, this.marker);
                };
                this.hideInfoWindow = function() {
                    mapInfoWindow.close();
                };
                this.hidePolygonImpl = function() {
                    $('#' + this.getKey()).removeClass("selected");
                    if (this.district == null || !this.district.isPolygonShown()) {
                        this.hideMarker();
                    }
                };
                this.getKey = function() {
                    return "school-" + this.state + "-" + this.id;
                };
                this.setMarker = function(marker) {
                    this.hideMarker();
                    this.marker = marker;
                    google.maps.event.addListener(marker, 'click', createSchoolMarkerClickListener(this));
                };
                this.setPolygon = function(polygon) {
                    this.hidePolygon();
                    this.polygon = polygon;
                    polygon.setOptions({strokeColor:'#78FF00', zIndex:2});
                };
                this.isSchool = function() {return true;};
            };
            SchoolWithBoundary.prototype = new MarkerWithBoundary();

            // AJAX METHODS
            var loadDistrictsServingLocationAjax = function(latitude, longitude) {
                jQuery.getJSON("/geo/boundary/ajax/getDistrictsForLocation.page", {lat:latitude, lon:longitude, level:$('.js_mapLevelCode:checked').val()}
                ).success(function(data) {
                    if (data.features.length == 0) {
                        alert("No district found at this point for level code " + $('.js_mapLevelCode:checked').val());
                    }
                    loadFeatureResponse(data.features, {highlightPolygons:true});
                    updateDistrictList();
                }).error(function() {
                    alert("Error fetching districts for location: " + latitude + "," + longitude);
                });
            };
            var loadSchoolsServingLocationAjax = function(latitude, longitude) {
                jQuery.getJSON("/geo/boundary/ajax/getSchoolsForLocation.page", {lat:latitude, lon:longitude, level:$('.js_mapLevelCode:checked').val()}
                ).success(function(data) {
                    if (data.features.length == 0) {
                        alert("No school or district found at this point for level code " + $('.js_mapLevelCode:checked').val());
                    }
                    hideAllPolygons();
                    var mapObjectsAdded = loadFeatureResponse(data.features, {highlightPolygons:true, showFeatures:false});
                    for (var x=0; x < mapObjectsAdded.length; x++) {
                        if (mapObjectsAdded[x].isDistrict()) {
                            mapObjectsAdded[x].showMarker();
                            mapObjectsAdded[x].showPolygon();
                            break;
                        }
                    }
                    mapObjectsAdded.sort(sortByGSRating);
                    var firstSchool = true;
                    for (x=0; x < mapObjectsAdded.length; x++) {
                        if (mapObjectsAdded[x].isSchool()) {
                            mapObjectsAdded[x].showMarker();
                            if (firstSchool) {
                                mapObjectsAdded[x].showPolygon();
                                firstSchool = false;
                            }
                        }
                    }
                    updateDistrictList();
                    updateSchoolList();
                }).error(function() {
                    alert("Error fetching schools for location: " + latitude + "," + longitude);
                });
            };
            var getDistrictBoundaryByIdAjax = function(state, id, name) {
                jQuery.getJSON(
                        "/geo/boundary/ajax/getDistrictBoundaryById.page",
                        {state:state, id:id, level:$('.js_mapLevelCode:checked').val()}
                ).success(getDistrictBoundaryByIdSuccess
                ).error(function(event) {
                    var district = stuffOnMap["district-" + state + "-" + id];
                    if (district) {
                        district.centerMap();
                    }
                    if (event.status == 404) {
                        alert("No district boundary found: " + name + " (" + state + ":" + id + ")");
                    } else {
                        alert("Error fetching district boundary: " + name + " (" + state + ":" + id + ")");
                    }
                });
            };
            var getSchoolBoundaryByIdAjax = function(state, id, name) {
                jQuery.getJSON(
                        "/geo/boundary/ajax/getSchoolBoundaryById.page",
                        {state:state, id:id, level:$('.js_mapLevelCode:checked').val()}
                ).success(getSchoolBoundaryByIdSuccess
                ).error(function(event) {
                    var school = stuffOnMap["school-" + state + "-" + id];
                    if (school) {
                        school.centerMap();
                    }
                    if (event.status == 404) {
                        alert("No school boundary found: " + name + " (" + state + ":" + id + ")");
                    } else {
                        alert("Error fetching school boundary: " + name + " (" + state + ":" + id + ")");
                    }
                });
            };
            var debug_getAllSchoolBoundariesForDistrictAjax = function(state, id, name) {
                jQuery.getJSON(
                        "/geo/boundary/ajax/getSchoolBoundariesForDistrict.page",
                        {state:state, districtId:id, level:$('.js_mapLevelCode:checked').val()}
                ).success(debug_getAllSchoolBoundariesForDistrictSuccess
                ).error(function() {
                    alert("Error fetching school boundaries for district: " + name + " (" + state + ":" + id + ")");
                });
            };
            var getAllSchoolsForDistrictAjax = function(state, id, name) {
                jQuery.getJSON(
                        "/geo/boundary/ajax/getSchoolsForDistrict.page",
                        {state:state, districtId:id, level:$('.js_mapLevelCode:checked').val()}
                ).success(getAllSchoolsForDistrictSuccess
                ).error(function() {
                    alert("Error fetching school list for district: " + name + " (" + state + ":" + id + ")");
                });
            };
            var loadDistrictsNearPointAjax = function(latitude, longitude) {
                var lat = Math.round(latitude * 1000000)/1000000;
                var lon = Math.round(longitude * 1000000)/1000000;
                if (typeof(window.History) !== 'undefined' && window.History.enabled === true) {
                    // use HTML 5 history API to rewrite the current URL to represent the new state.
                    window.History.replaceState(null, document.title, '?lat=' + lat + '&lon=' + lon + '&level=' + $('.js_mapLevelCode:checked').val());
                }
                if (districtBoundaryMap == null) {
                    var latLng = new google.maps.LatLng(lat, lon);
                    initMap(latLng);
                }
                jQuery.getJSON("/geo/boundary/ajax/getDistrictsNearPoint.page", {lat:lat, lon:lon, level:$('.js_mapLevelCode:checked').val()}
                ).success(function(data) {
                      try {
                          loadDistrictsNearPointSuccess(data.features);
                          updateDistrictList();
                          centerMap(new google.maps.LatLng(lat, lon));
                      } catch (e) {
                          alert("Error: "+ e.message);
                      }
                }).error(function() {
                    alert("Error fetching district list");
                });
            };
            // AJAX SUCCESS HANDLERS
            var loadFeatureResponse = function(features, options) {
                var mapObjectsAdded = new Array();
                options = options || {};
                var highlightPolygons = typeof(options.highlightPolygons) !== 'undefined' ? options.highlightPolygons : false;
                var showFeatures = typeof(options.showFeatures) !== 'undefined' ? options.showFeatures : true;
                for (var featureIndex = 0; featureIndex < features.length; featureIndex++) {
                    var feature = features[featureIndex];
                    var mapObject = createMapObject(feature.data);
                    if (feature.type == 'marker') {
                        if (!mapObject.hasMarker()) {
                            mapObject.setMarker(GS.Map.Helper.createMarker(feature));
                        }
                        if (showFeatures) {
                            mapObject.showMarker();
                        }
                    } else if (feature.type == 'polygon') {
                        if (!mapObject.hasPolygon()) {
                            mapObject.setPolygon(GS.Map.Helper.createGoogleMapsPolygon({coordinates:feature.coordinates}));
                        }
                        if (typeof(feature.centroid) !== 'undefined') {
                            mapObject.centroid = {lat: feature.centroid.lat, lon: feature.centroid.lon};
                            if (mapObject.centerOnLoad === true) {
                                mapObject.centerMap();
                                mapObject.centerOnLoad = false;
                            }
                        }
                        if (showFeatures) {
                            mapObject.showPolygon();
                            if (highlightPolygons) {
                                GS.Map.Helper.highlightPolygon(mapObject.polygon, {duration:200});
                            }
                        }
                    }
                    mapObjectsAdded.push(mapObject);
                    if (typeof(feature.dependents) !== 'undefined' && feature.dependents.length > 0) {
                        for (var dependentIndex = 0; dependentIndex < feature.dependents.length; dependentIndex++) {
                            mapObjectsAdded = mapObjectsAdded.concat(loadFeatureResponse(feature.dependents, options));
                        }
                    }
                }
                return mapObjectsAdded;
            };
            var createMapObject = function(data) {
                var thingOnMap;
                if (data.type == 'district') {
                    thingOnMap = stuffOnMap["district-" + data.state + "-" + data.id];
                    if (typeof(thingOnMap) === 'undefined') {
                        thingOnMap = new DistrictWithBoundary(data);
                        stuffOnMap["district-" + data.state + "-" + data.id] = thingOnMap;
                    }
                } else if (data.type == 'school') {
                    thingOnMap = stuffOnMap["school-" + data.state + "-" + data.id];
                    if (typeof(thingOnMap) === 'undefined') {
                        var district = stuffOnMap["district-" + data.state + "-" + data.districtId];
                        thingOnMap = new SchoolWithBoundary(data);
                        thingOnMap.district = district;
                        stuffOnMap["school-" + data.state + "-" + data.id] = thingOnMap;
                        if (typeof(district) !== 'undefined') {
                            district.schools.push(thingOnMap);
                        }
                    }
                }
                return thingOnMap;
            };
            var loadDistrictsNearPointSuccess = function(features) {
                clearMap();
                loadFeatureResponse(features);
            };
            var getDistrictBoundaryByIdSuccess = function(data) {
                loadFeatureResponse(data.features);
            };
            var getSchoolBoundaryByIdSuccess = function(data) {
                loadFeatureResponse(data.features);
            };
            var debug_getAllSchoolBoundariesForDistrictSuccess = function(data) {
                if (data.features.length == 0) {
                    alert("No school attendance zones found");
                }
                loadFeatureResponse(data.features);
                updateSchoolList();
            };
            var getAllSchoolsForDistrictSuccess = function(data) {
                if (data.features.length == 0) {
                    alert("No schools found");
                }
                loadFeatureResponse(data.features);
                updateSchoolList();
            };
            // MISCELLANEOUS FUNCTIONS
            var centerMap = function(latLng, options) {
                options = options || {};
                var moveMarker = typeof(options.moveMarker) !== 'undefined' ? options.moveMarker : false;
                districtBoundaryMap.panTo(latLng);
                if (moveMarker) {
                    setCenterMarkerAtLocation(latLng);
                }
            };
            var setCenterMarkerAtLocation = function(latLng) {
                if (centerMarker == null) {
                    centerMarker = GS.Map.Helper.createMarker({
                        center: {latitude:latLng.lat, longitude:latLng.lng},
                        size: {width:39, height:34},
                        url: '/res/img/map/green_arrow.png',
                        shadow: {
                            url: '/res/img/map/green_arrow_shadow.png',
                            size:new google.maps.Size(39,34),
                            anchor:new google.maps.Point(11, 34)},
                        origin: {x:0, y:0},
                        anchor: {x:11, y:34},
                        shape: {type:'poly', coord:[0, 0, 23, 0, 23, 34, 0, 34]}
                    });
                } else {
                    centerMarker.setPosition(latLng);
                }
            };
            var initMap = function(center) {
                districtBoundaryMap = new google.maps.Map(document.getElementById('map-canvas'), {
                    zoom: 11,
                    center: center,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                });
                $('.js_showWithMap').show();
                setCenterMarkerAtLocation(center);
                centerMarker.setMap(districtBoundaryMap);
            };
            var clearMap = function() {
                for (var key in stuffOnMap) {
                    var thingOnMap = stuffOnMap[key];
                    thingOnMap.hideMarker();
                    thingOnMap.hidePolygon();
                    delete stuffOnMap[key];
                }
                $('#districtList').empty();
                $('#schoolList').empty();
            };
            var getUrlVars = function() {
                var vars = {};
                var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {
                    vars[key] = value;
                });
                return vars;
            };
            var sortByGSRating = function(a,b) {
                if (a.rating > 0 && a.rating < 11 && b.rating > 0 && b.rating < 11) {
                    return b.rating - a.rating;
                } else if (a.rating > 0 && a.rating < 11) {
                    return -1;
                }
                return 1;
            };
            var browserGetLocationSuccess = function(pos) {
                var latitude = pos.coords.latitude;
                var longitude = pos.coords.longitude;
                loadDistrictsNearPointAjax(latitude, longitude);
            };
            var browserGetLocationFail = function() {
                loadDistrictsNearPointAjax(37.790948, -122.3942572);
            };
            var hideAllPolygons = function() {
                for (var key in stuffOnMap) {
                    stuffOnMap[key].hidePolygon();
                }
            };
            var hideAllDistrictPolygons = function() {
                for (var key in stuffOnMap) {
                    if (stuffOnMap[key].isDistrict()) {
                        stuffOnMap[key].hidePolygon();
                    }
                }
            };
            var hideAllSchoolPolygons = function() {
                for (var key in stuffOnMap) {
                    if (stuffOnMap[key].isSchool()) {
                        stuffOnMap[key].hidePolygon();
                    }
                }
            };
            var hideAllSchools = function() {
                for (var key in stuffOnMap) {
                    if (stuffOnMap[key].isSchool()) {
                        stuffOnMap[key].hidePolygon();
                        stuffOnMap[key].hideMarker();
                    }
                }
            };

            // EVENT HANDLERS
            var createDistrictMarkerClickListener = function(districtOnMap) {
                return function() {
                    districtClickHandler({district:districtOnMap, center:false});
                };
            };
            var createSchoolMarkerClickListener = function(schoolOnMap) {
                return function() {
                    schoolClickHandler({school:schoolOnMap, center:false});
                };
            };
            var districtClickHandler = function(params) {
                var district = params.district;
                var moveToCenter = typeof(params.center) !== 'undefined' ? params.center : false;
                district.centerOnLoad = moveToCenter;
                if (!district.isPolygonShown()) {
                    hideAllPolygons();
                    hideAllSchools();
                    district.loadAndShowPolygon();
                    district.loadSchools();
                }
                if (moveToCenter) {
                    district.centerMap();
                }
                district.showInfoWindow();
            };
            var schoolClickHandler = function(params) {
                var school = params.school;
                var moveToCenter = typeof(params.center) !== 'undefined' ? params.center : false;
                school.centerOnLoad = moveToCenter;
                if (!school.isPolygonShown()) {
                    if (school.hasPolygon() && moveToCenter) {
                        school.centerMap();
                    }
                    school.loadAndShowPolygon();
                }
                school.showInfoWindow();
            };
            var loadDistrictsForLocationEventHandler = function(event) {
                if (event.latLng) {
                    loadDistrictsServingLocationAjax(event.latLng.lat(), event.latLng.lng());
                }
            };
            var loadSchoolsForLocationEventHandler = function(event) {
                if (event.latLng) {
                    loadSchoolsServingLocationAjax(event.latLng.lat(), event.latLng.lng());
                }
            };
            var updateDebugListeners = function() {
                for (var x=0; x < mapClickListeners.length; x++) {
                    google.maps.event.removeListener(mapClickListeners[x]);
                }
                mapClickListeners = new Array();
                var key;
                if ($('.js_mapClickBehavior:checked').val() == 'loadDistrict') {
                    mapClickListeners.push(google.maps.event.addListener(districtBoundaryMap, 'click', loadDistrictsForLocationEventHandler));
                    for (key in stuffOnMap) {
                        if (stuffOnMap[key].hasPolygon()) {
                            mapClickListeners.push(google.maps.event.addListener(stuffOnMap[key].polygon, 'click', loadDistrictsForLocationEventHandler));
                        }
                    }
                } else if ($('.js_mapClickBehavior:checked').val() == 'loadSchool') {
                    mapClickListeners.push(google.maps.event.addListener(districtBoundaryMap, 'click', loadSchoolsForLocationEventHandler));
                    for (key in stuffOnMap) {
                        if (stuffOnMap[key].hasPolygon()) {
                            mapClickListeners.push(google.maps.event.addListener(stuffOnMap[key].polygon, 'click', loadSchoolsForLocationEventHandler));
                        }
                    }
                }
            };
            var updateDistrictList = function() {
                var districtListDiv = $('#districtList');
                districtListDiv.empty();
                var districts = new Array();
                for (var key in stuffOnMap) {
                    if (stuffOnMap.hasOwnProperty(key)) {
                        if (stuffOnMap[key].isDistrict() && stuffOnMap[key].isMarkerShown()) {
                            districts.push(stuffOnMap[key]);
                        }
                    }
                }
                // sort on district rating
                districts.sort(sortByGSRating);
                var scrollTo = null;
                for (var districtIndex = 0; districtIndex < districts.length; districtIndex++) {
                    var district = districts[districtIndex];
                    var districtKey = "district-" + district.state + "-" + district.id;
                    var districtRating = 'na';
                    var selected = '';
                    if (district.isPolygonShown()) {
                        selected = ' class="selected"';
                        if (!multiSelectDistrict) {
                            scrollTo=districtKey;
                        }
                    }
                    var li = '<li id="' + districtKey + '"' + selected + '>' + district.name + ' ';
                    li += '<span class="sprite badge_sm_';
                    if (district.rating > 0 && district.rating < 11) {
                        li += district.rating
                    } else {
                        li += 'na'
                    }
                    li += '_b';
                    li += '"><!-- do not collapse --></span>';
                    li += '</li>';
                    districtListDiv.append(li);
                }
                if (scrollTo != null) {
                    if (isScrolledIntoView($('#' + scrollTo), $('#districtListDiv')) === false) {
                        var scrollTop = $('#districtListDiv').scrollTop();
                        $('#districtListDiv').scrollTop(scrollTop + $('#' + scrollTo).position().top);
                    }
                }
            };
            var updateSchoolList = function() {
                var schoolListDiv = $('#schoolList');
                schoolListDiv.empty();
                var schools = new Array();
                for (var key in stuffOnMap) {
                    if (stuffOnMap.hasOwnProperty(key)) {
                        if (stuffOnMap[key].isSchool() && stuffOnMap[key].isMarkerShown()) {
                            schools.push(stuffOnMap[key]);
                        }
                    }
                }
                // sort on school rating
                schools.sort(sortByGSRating);
                for (var schoolIndex = 0; schoolIndex < schools.length; schoolIndex++) {
                    var school = schools[schoolIndex];
                    var schoolKey = "school-" + school.state + "-" + school.id;
                    var schoolRating = 'na';
                    var selected = '';
                    if (school.isPolygonShown()) {
                        selected = ' class="selected"';
                    }
                    var li = '<li id="' + schoolKey + '"' + selected + '>' + school.name + ' ';
                    li += '<span class="sprite badge_sm_';
                    if (school.rating > 0 && school.rating < 11) {
                        li += school.rating
                    } else {
                        li += 'na'
                    }
                    li += '_b';
                    li += '"><!-- do not collapse --></span>';
                    li += '</li>';
                    schoolListDiv.append(li);
                }
            };
            var geocodeAddressSuccess = function(geocodeResults) {
                if (geocodeResults.length == 0) {
                    alert("Cannot determine location for '" + searchInput + "'");
                } else if (geocodeResults.length == 1) {
                    geocodeResults[0]['totalResults'] = 1;
                    clearMap();
                    loadDistrictsNearPointAjax(geocodeResults[0]['lat'],
                                               geocodeResults[0]['lon']);
                    centerMap(new google.maps.LatLng(geocodeResults[0]['lat'], geocodeResults[0]['lon']), {moveMarker:true});
                } else {
                    // ignore multiple results for now
                    geocodeResults[0]['totalResults'] = geocodeResults.length;
                    clearMap();
                    loadDistrictsNearPointAjax(geocodeResults[0]['lat'],
                                               geocodeResults[0]['lon']);
                    centerMap(new google.maps.LatLng(geocodeResults[0]['lat'], geocodeResults[0]['lon']), {moveMarker:true});
                }
            };
            jQuery(function () {
                try {
                    var params = getUrlVars();
                    if (params.lat && params.lon) {
                        loadDistrictsNearPointAjax(params.lat, params.lon);
                    } else {
                        browserGetLocationFail();
                        navigator.geolocation.getCurrentPosition(browserGetLocationSuccess);
                    }
                } catch (e) {
                    browserGetLocationFail();
                }

                $('#js_reloadMap').click(function() {
                    clearMap();
                    loadDistrictsNearPointAjax(districtBoundaryMap.getCenter().lat(),
                                               districtBoundaryMap.getCenter().lng());
                });
                $('#js_clearPolygons').click(function() {
                    hideAllPolygons();
                });
                $('#js_clearAll').click(function() {
                    clearMap();
                });
                $('#js_drawAllDistricts').click(function() {
                    multiSelectDistrict = true;
                    for (var key in stuffOnMap) {
                        if (stuffOnMap.hasOwnProperty(key) && stuffOnMap[key].isDistrict()) {
                            stuffOnMap[key].loadAndShowPolygon();
                        }
                    }
                });
                $('#js_drawAllDistrictsAndSAZ').click(function() {
                    for (var key in stuffOnMap) {
                        if (stuffOnMap.hasOwnProperty(key) && stuffOnMap[key].isDistrict()) {
                            stuffOnMap[key].loadAndShowPolygon();
                            debug_getAllSchoolBoundariesForDistrictAjax(stuffOnMap[key].state, stuffOnMap[key].id, stuffOnMap[key].name);
                        }
                    }
                });
                $('#js_getSAZ').click(function() {
                    if (selectedDistrict != null) {
                        debug_getAllSchoolBoundariesForDistrictAjax(selectedDistrict.state, selectedDistrict.id, selectedDistrict.name);
                    }
                });
                $('.js_mapLevelCode').change(function() {
                    clearMap();
                    loadDistrictsNearPointAjax(districtBoundaryMap.getCenter().lat(),
                                               districtBoundaryMap.getCenter().lng());
                });
                $('.js_mapClickBehavior').change(updateDebugListeners);
                $('#districtList').delegate("li", "click", function() {
                    var key = $(this).attr('id');
                    if (stuffOnMap[key] !== undefined) {
                        districtClickHandler({district:stuffOnMap[key], center:true});
                    }
                });
                $('#schoolList').delegate("li", "click", function() {
                    var key = $(this).attr('id');
                    if (stuffOnMap[key] !== undefined) {
                        schoolClickHandler({school:stuffOnMap[key], center:true});
                    }
                });
                $('#searchLocationForm').submit(function() {
                    GS.Map.Helper.geocodeAddress($('#js_mapAddressQuery').val(), geocodeAddressSuccess);
                    return false;
                });
                updateDebugListeners();
            });
        })();
        ]]>
    </script>

</head>
<gsml:body adPageName="districtBoundary" pageLayout="leftside">
    <div class="leftSide fltlft">
        <h3>School &amp; District Map Tool</h3>
        <div class="js_showWithMap hidden">
            <div id="districtListDiv">
                <ul id="districtList"><!-- not empty --></ul>
            </div>
            <div>Currently selected district: <span id="currentlySelectedDistrict"><!-- no collapse --></span></div>
            <div id="schoolListDiv">
                Schools:
                <ul id="schoolList"><!-- not empty --></ul>
            </div>
        </div>
    </div>
    <div class="rightSide fltrt">
        <div class="">
            <form action="" id="searchLocationForm" onsubmit="return false;">
                <gsml:radio name="level_code" styleClass="js_mapLevelCode" styleId="mapLevelCode_e" value="e" checked="${empty param.level or param.level == 'e'}"/>
                <label for="mapLevelCode_e">Elementary</label>
                <gsml:radio name="level_code" styleClass="js_mapLevelCode" styleId="mapLevelCode_m" value="m" checked="${param.level == 'm'}"/>
                <label for="mapLevelCode_m">Middle</label>
                <gsml:radio name="level_code" styleClass="js_mapLevelCode" styleId="mapLevelCode_h" value="h" checked="${param.level == 'h'}"/>
                <label for="mapLevelCode_h">High</label>
                <label class="searchLocationLabel" for="js_mapAddressQuery">Search location:</label>
                <input type="text" name="addressQuery" id="js_mapAddressQuery"/>
                <button type="submit" name="loadAddress" id="js_loadAddress">Search</button>
            </form>
        </div>
        <div class="js_showWithMap hidden">
            <div id="map-canvas"><!-- no collapse --></div>
            <button name="reload" id="js_reloadMap">Reload at this location</button>
            <button name="clearAll" id="js_clearAll">Debug: Clear All</button>
            <button name="clearPolygons" id="js_clearPolygons">Debug: Clear Polygons</button>
            <button name="drawAllDistricts" id="js_drawAllDistricts" class="">Debug: Draw all districts</button>
            <button name="getSAZ" id="js_getSAZ" class="hidden">Debug: Load SAZ for selected district</button>
            <button name="drawAllDistrictsAndSAZ" id="js_drawAllDistrictsAndSAZ" class="hidden">Debug: Draw all districts and SAZ (Warning!)</button>
            <div class="options">
                Map click behavior:
                <input type="radio" name="mapClickBehavior" class="js_mapClickBehavior" id="mapClickLoadSchool" value="loadSchool" checked="checked"/><label for="mapClickLoadSchool">Show Boundaries</label>
                <input type="radio" name="mapClickBehavior" class="js_mapClickBehavior" id="mapClickLoadDistrict" value="loadDistrict"/><label for="mapClickLoadDistrict">Show Only District Boundary</label>
            </div>
        </div>
        <div class="hidden">
            <div id="boundaryMapDistrictInfoWindow">
                <div class="line">
                    <div class="unit size6of7">
                        <div class="js_name"><!-- not empty --></div>
                        <div class="js_address"><!-- not empty --></div>
                    </div>
                    <div class="unit size1of7 lastUnit">
                        <div class="js_rating"><!-- not empty --></div>
                    </div>
                </div>
            </div>
            <div id="boundaryMapSchoolInfoWindow">
                <div class="line">
                    <div class="unit size6of7">
                        <div class="js_name"><!-- not empty --></div>
                        <div class="js_address"><!-- not empty --></div>
                    </div>
                    <div class="unit size1of7 lastUnit">
                        <div class="js_rating"><!-- not empty --></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</gsml:body>
</html>
</jsp:root>