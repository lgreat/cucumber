<?xml version="1.0" encoding="UTF-8"?>
<jsp:root version="2.0"
          xmlns:jsp="http://java.sun.com/JSP/Page"
          xmlns:c="http://java.sun.com/jsp/jstl/core"
          xmlns:fn="http://java.sun.com/jsp/jstl/functions"
          xmlns:pageHelper="urn:jsptagdir:/WEB-INF/tags/pageHelper"
          xmlns:gsml="urn:jsptagdir:/WEB-INF/tags/gsml"
          xmlns:map="urn:jsptagdir:/WEB-INF/tags/map"
        >
<jsp:directive.tag import="gs.data.geo.LatLonRect"/>
<jsp:directive.tag import="gs.data.geo.LatLon"/>
<jsp:directive.tag import="gs.web.search.SchoolSearchResult"/>
<jsp:directive.tag import="java.util.List"/>
<jsp:directive.tag import="java.util.ArrayList"/>
<jsp:directive.tag import="gs.data.school.School"/>
<jsp:directive.tag import="gs.web.util.UrlBuilder"/>
<jsp:directive.tag body-content="empty"
                   description="Draw a map of schools." />
<jsp:directive.attribute name="id" required="true" description="XML id of the Html div element that holds the map."/>
<jsp:directive.attribute name="lon" required="false" type="java.lang.Float" description="Longitude (center of map)"/>
<jsp:directive.attribute name="lat" required="false" type="java.lang.Float" description="Latitude (center of map)"/>
<jsp:directive.attribute name="schools" required="true" description="Schools to map" type="java.util.List"/>
<jsp:directive.attribute name="tooltips" required="false" description="Use tooltips?" />
<jsp:directive.attribute name="bubbles" required="false" description="Use Google's standard thought bubbles" />
<jsp:directive.attribute name="centerSchool" required="false" type="gs.data.school.School" description="If provided, centers map on school and places star marker"/>
<jsp:directive.attribute name="minZoom" required="false" type="java.lang.Integer" description="Minimum google zoom, defaults to 9"/>
<jsp:directive.attribute name="maxZoom" required="false" type="java.lang.Integer" description="Maximum google zoom, defaults to 12"/>
<!--
Schools without lat/lon are skipped.
-->
<jsp:scriptlet><![CDATA[

    // Transform SchoolSearchResults to Schools if necessary
    if (schools.size() > 0 && schools.get(0) instanceof SchoolSearchResult) {
        List<School> schoolList = new ArrayList<School>();
        for (Object school : schools) {
            schoolList.add(((SchoolSearchResult) school).getSchool());
        }
        request.setAttribute("mapSchools", schoolList);
    } else {
        request.setAttribute("mapSchools", schools);
    }

    if (centerSchool != null && centerSchool.getLat() != null && centerSchool.getLon() != null) {
        // if requested to center on a school, do so
        // note if school has no latlon then map is centered around nearby schools instead
        request.setAttribute("center", new LatLon(centerSchool.getLat(), centerSchool.getLon()));
    } else {
        // otherwise calculate the optimal center point
        LatLonRect r = new LatLonRect(schools);
        if (r.isCentered()) {
            request.setAttribute("center", r.getCenter());
        } else {
            request.setAttribute("center", new LatLon(lat, lon));
        }
    }

    ]]></jsp:scriptlet>
<c:if test="${!requestScope.context.crawler}">
<map:setup/>
<pageHelper:addOnLoadHandler handler="doMapSchools()"/>
<script type="text/javascript">
<![CDATA[
<!--
function addBubble(m, link, name, schInfo, stInfo) {
  GEvent.addListener(m, "click", function() {
    var s = '<div style="font-size:small;width: 200px;height: 20px"><a href="' + link + '">' + name + '</a>' +
            schInfo + stInfo + '</div>'
    m.openInfoWindowHtml(s);
  });
};
]]>

function extendBoundsToCenterOnPoint(point, bounds) {
  bounds.extend(reflectPoint(point, bounds.getNorthEast()));
  bounds.extend(reflectPoint(point, bounds.getSouthWest()));
}

// Given points x (outlier) and y (center), returns point z such that the rectangle defined by
// x and z has its center at y. Returns a GLatLng object
function reflectPoint(centerPoint, outlierPoint) {
  return new GLatLng(centerPoint.lat() + (centerPoint.lat() - outlierPoint.lat()),
                     centerPoint.lng() + (centerPoint.lng() - outlierPoint.lng()));
}

var minZoom = ${not empty minZoom?minZoom:6};
var maxZoom = ${not empty maxZoom?maxZoom:13};
var displayTooltips = ${not empty tooltips};
var useBubbles = ${not empty bubbles};
var centerOnStar = ${not empty centerSchool};
var centerPoint = new GLatLng(${center.lat}, ${center.lon});
var schoolArray = new Array();
function initSchoolInfo() {
    var mySchool;

<c:forEach var="school" items="${mapSchools}">
  <c:if test="${not empty school.lon}">
    <jsp:useBean id="school" type="gs.data.school.School" />
    <jsp:scriptlet><![CDATA[
        UrlBuilder urlBuilder = new UrlBuilder(school, UrlBuilder.SCHOOL_PROFILE);
        request.setAttribute("schoolUrl", urlBuilder.asSiteRelativeXml(request));
    ]]></jsp:scriptlet>
    mySchool = new Object();
    mySchool.link = "${schoolUrl}";
    mySchool.name = "${school.name}";
    mySchool.location = new GLatLng(${school.lat},${school.lon});
    <c:if test="${not empty bubbles}">
      // only for bubbles, accessing enrollment requires an extra DB query per school
      <![CDATA[
      mySchool.info = "<br />${school.gradeLevels}, ${school.type.name}";
      mySchool.enrollment = ${not empty school.enrollment?school.enrollment:0};
      mySchool.stInfo = "";
      if (mySchool.enrollment > 0) {
        mySchool.stInfo = "<br />" + mySchool.enrollment + " students";
      }
      ]]>
    </c:if>
    schoolArray.push(mySchool);
  </c:if>
</c:forEach>
}

function initMap() {
    var i = 0;
    var tooltip = null;
    var map = new GMap2(document.getElementById("${id}"));
    document.getElementById("${id}").style.overflow = "hidden";
    var marker;

    map.addControl(new GSmallMapControl());
    map.setCenter(centerPoint, 17);
    var bounds = new GLatLngBounds();
    bounds.extend(centerPoint);
    <![CDATA[
    for (var counter=0; counter < schoolArray.length; counter++) {
      var curSchool = schoolArray[counter];
      if (displayTooltips) {
        tooltip = curSchool.name;
      } else {
        tooltip = null;
      }
      marker = new GMarker(curSchool.location, {title: tooltip});
      map.addOverlay(marker);
      bounds.extend(curSchool.location);
      if (useBubbles) {
        addBubble(marker, curSchool.link, curSchool.name, curSchool.info, curSchool.stInfo);
      } else {
        addClickListener(marker, curSchool.link); // because of closures, farm this off to another method
      }
    }
    ]]>
    if (centerOnStar) {
      var starIcon = new GIcon();
      starIcon.image = "/res/img/school/overview/star.gif";
      starIcon.iconSize = new GSize(26,25);
      starIcon.iconAnchor = new GPoint(13,12);
      // for the purposes of stack order, the star marker is treated as if it is
      // just north of the equator. This effectively makes it always on top of any
      // markers placed in the United States
      function fakeLatitudeAtEquatorOrder(marker, b) {
        return GOverlay.getZIndex(1.0);
      }
      if (displayTooltips) {
        tooltip = "${centerSchool.name}";
      } else {
        tooltip = null;
      }
      marker = new GMarker(centerPoint, {icon:starIcon, zIndexProcess: fakeLatitudeAtEquatorOrder, title: tooltip});
      map.addOverlay(marker);
      extendBoundsToCenterOnPoint(centerPoint, bounds);
    }
    var zoom = map.getBoundsZoomLevel(bounds);
    if (zoom > maxZoom) zoom = maxZoom;
    if (minZoom > zoom) zoom = minZoom;
    map.setZoom(zoom);
}

function addClickListener(marker, link) {
  GEvent.addListener(marker, "click", function() { location = link; });
}

function doMapSchools() {
  if (GBrowserIsCompatible()) {
      initSchoolInfo();
      initMap();
  }
}
-->
</script>
</c:if>
</jsp:root>