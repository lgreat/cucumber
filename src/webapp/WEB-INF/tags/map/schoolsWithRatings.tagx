<?xml version="1.0" encoding="UTF-8"?>
<jsp:root version="2.0"
          xmlns:jsp="http://java.sun.com/JSP/Page"
          xmlns:c="http://java.sun.com/jsp/jstl/core"
          xmlns:fn="http://java.sun.com/jsp/jstl/functions"
          xmlns:pageHelper="urn:jsptagdir:/WEB-INF/tags/pageHelper"
          xmlns:gsml="urn:jsptagdir:/WEB-INF/tags/gsml"
          xmlns:map="urn:jsptagdir:/WEB-INF/tags/map"
          xmlns:link="urn:www.greatschools.org/taglib/link"
          xmlns:gsweb="gstaglib"
        >
<!--

                    WARNING WARNING WARNING WARNING WARNING WARNING WARNING 5/31/2012

                    This is shared by the school search widget (schoolSearch.jspx)
                    ANY EDITS TO THIS FILE MUST BE REPORTED TO QA SO THEY CAN REGRESSION TEST OUR WIDGET

                    WARNING WARNING WARNING WARNING WARNING WARNING WARNING 5/31/2012


Created for GS-7643 School Search Widget
-->
<jsp:directive.tag import="gs.data.geo.LatLonRect"/>
<jsp:directive.tag import="gs.data.geo.LatLon"/>
<jsp:directive.tag import="gs.web.util.UrlBuilder"/>
<jsp:directive.tag body-content="empty"
                   description="Draw a map of schools." />
<jsp:directive.attribute name="id" required="true" description="XML id of the Html div element that holds the map."/>
<jsp:directive.attribute name="lon" required="false" type="java.lang.Float" description="Longitude (center of map)"/>
<jsp:directive.attribute name="lat" required="false" type="java.lang.Float" description="Latitude (center of map)"/>
<jsp:directive.attribute name="showLocationMarker" required="false" type="java.lang.Boolean" description="Whether or not to show the location marker"/>
<jsp:directive.attribute name="locationMarkerLon" required="false" type="java.lang.Float" description="Longitude of location marker"/>
<jsp:directive.attribute name="locationMarkerLat" required="false" type="java.lang.Float" description="Latitude of location marker"/>
<jsp:directive.attribute name="schools" required="false" description="Schools to map, as SchoolWithRatings objects" type="java.util.List"/>
<jsp:directive.attribute name="minZoom" required="false" type="java.lang.Integer" description="Minimum google zoom, defaults to 9"/>
<jsp:directive.attribute name="maxZoom" required="false" type="java.lang.Integer" description="Maximum google zoom, defaults to 12"/>
<jsp:directive.attribute name="zoom" required="false" type="java.lang.Integer" description="Google zoom, overrides minZoom or maxZoom"/>
<jsp:directive.attribute name="s_cid" required="false" type="java.lang.String" description="Optional s_cid campaign tracking code to append to links"/>
<jsp:directive.attribute name="bubbles" required="false" description="Use Google's standard thought bubbles" />
<jsp:directive.attribute name="alwaysUsePreIconsForPreschools" required="false" description="Use Preschool handprint icon for preschools" />

<!--
Schools without lat/lon are skipped.
-->
<jsp:scriptlet><![CDATA[

    request.setAttribute("mapSchools", schools);

    if (showLocationMarker == null || locationMarkerLon == null || locationMarkerLat == null) {
        showLocationMarker = false;
    }

    request.setAttribute("showLocationMarker", showLocationMarker);
    if (showLocationMarker) {
        request.setAttribute("locationPoint", new LatLon(locationMarkerLat, locationMarkerLon));
    }

    boolean validLatLon = (lat != null && lon != null && (lat + lon != 0));
    if (validLatLon) {
        try {
            request.setAttribute("center", new LatLon(lat, lon));
        } catch (IllegalArgumentException iae) {
            // LatLon is picky about only accepting coords in the US, so we must have some bad coords.  Get rid of them
            // and compute the center a different way.
            lat = null;
            lon = null;
            validLatLon = false;
        }
    }

    if (!validLatLon){
        // Calculate the optimal center point
        if (schools != null) {
            LatLonRect r = new LatLonRect(schools);
            if (r.isCentered()) {
                request.setAttribute("center", r.getCenter());
            } else {
                request.setAttribute("center", new LatLon(lat, lon));
            }
        } else {
            request.setAttribute("center", new LatLon(lat, lon));
        }
    }
    ]]></jsp:scriptlet>
<c:if test="${!requestScope.context.crawler}">
<map:setup/>
<pageHelper:addOnLoadHandler handler="GS_doMapSchoolsWithRatings()"/>
<script type="text/javascript">

function extendBoundsToCenterOnPoint(point, bounds) {
  bounds.extend(reflectPoint(point, bounds.getNorthEast()));
  bounds.extend(reflectPoint(point, bounds.getSouthWest()));
}

// Given points x (outlier) and y (center), returns point z such that the rectangle defined by
// x and z has its center at y. Returns a LatLng object
function reflectPoint(centerPoint, outlierPoint) {
  return new google.maps.LatLng(centerPoint.lat() + (centerPoint.lat() - outlierPoint.lat()),
                     centerPoint.lng() + (centerPoint.lng() - outlierPoint.lng()));
}

var minZoom = ${not empty minZoom?minZoom:6};
var maxZoom = ${not empty maxZoom?maxZoom:13};
var specifiedZoom = ${not empty zoom?zoom:0};
var displayTooltips = true;
var useBubbles = ${empty bubbles or bubbles eq true};
var alwaysUsePreIconsForPreschools = ${not empty alwaysUsePreIconsForPreschools and alwaysUsePreIconsForPreschools eq true};
var showLocationMarker = ${showLocationMarker};

<c:if test="${not empty locationPoint}">
var locationPoint = new google.maps.LatLng(${locationPoint.lat}, ${locationPoint.lon});
</c:if>
var infoWindow = new google.maps.InfoWindow();
var centerPoint = new google.maps.LatLng(${center.lat}, ${center.lon});
var schoolArray = new Array();

function initSchoolInfo() {
    var mySchool;
    var schoolRatingImg;
<c:forEach var="schoolWithRatings" items="${mapSchools}">
  <c:set var="curSchool" value="${schoolWithRatings.school}"/>
  <c:if test="${not empty curSchool.lon}">
    <jsp:useBean id="curSchool" type="gs.data.school.School" />
    <jsp:scriptlet><![CDATA[
      UrlBuilder urlBuilder = new UrlBuilder(curSchool, UrlBuilder.SCHOOL_PROFILE);
      request.setAttribute("schoolUrl", urlBuilder.asFullUrlXml(request));
    ]]></jsp:scriptlet>

    mySchool = new Object();

    mySchool.name = "${gsweb:escapeJavaScript(curSchool.name)}";
    mySchool.link = "${gsweb:escapeJavaScript(schoolUrl)}";
    <c:if test="${s_cid ne null and s_cid > ''}">
        mySchool.link += "?s_cid=${gsweb:escapeJavaScript(s_cid)}";
    </c:if>
    mySchool.street = "${gsweb:escapeJavaScript(curSchool.physicalAddress.street)}";
    mySchool.city = "${gsweb:escapeJavaScript(curSchool.physicalAddress.city)}";
    mySchool.state = "${curSchool.physicalAddress.state.abbreviation}";
    mySchool.zip = "${gsweb:escapeJavaScript(curSchool.physicalAddress.zip)}";
    mySchool.phone = '<c:if test="${not empty curSchool.phone}">${curSchool.phone}</c:if>';
    mySchool.address = mySchool.street + ' ' + mySchool.city + ', ' + mySchool.state + ' ' + mySchool.zip;
    mySchool.levelCode = "${curSchool.levelCode}";
    mySchool.type = "${curSchool.type.name}";
    mySchool.gradeLevel = "${curSchool.gradeLevels}";
    mySchool.isNewGSRating = "${curSchool.isNewGSRating}";

    mySchool.rating = 0;
    mySchool.ratingHtml = '';
    <c:if test="${schoolWithRatings.rating ne null and schoolWithRatings.rating gt 0 and schoolWithRatings.rating lt 11}">

        var oldSchoolProfilePublicRatingImg = '<span class="ratingx24-public-O r-24-${schoolWithRatings.rating}"><!-- do not collapse --></span>';
        var newSchoolProfilePublicRatingImg = '<span class="ratingx24-public-RYG r-24-${schoolWithRatings.rating}"><!-- do not collapse --></span>';
        var oldSchoolProfilePrivateRatingImg = '<span class="ratingx24-private-O r-24-${schoolWithRatings.rating}"><!-- do not collapse --></span>';
        var newSchoolProfilePrivateRatingImg = '<span class="ratingx24-private-RYG r-24-${schoolWithRatings.rating}"><!-- do not collapse --></span>';

        if (mySchool.type == 'private') {
           schoolRatingImg = (mySchool.isNewGSRating === 'true') ? newSchoolProfilePrivateRatingImg : oldSchoolProfilePrivateRatingImg;
        } else {
           schoolRatingImg = (mySchool.isNewGSRating === 'true') ? newSchoolProfilePublicRatingImg : oldSchoolProfilePublicRatingImg;
        }
        mySchool.ratingHtml = '<div class="schoolRating"><div>GreatSchools Rating</div>' +
                           schoolRatingImg +
                           '</div>';
        mySchool.rating = ${schoolWithRatings.rating};
    </c:if>
    mySchool.parentRatingHtml = '<div class="parentRating">';
    <c:set var="parent_rating" value="0"/>
    <c:if test="${(schoolWithRatings.parentRatings ne null) and (schoolWithRatings.parentRatings.displayOverallRating eq true)}">
        <c:set var="parent_rating" value="${schoolWithRatings.parentRatings.overall}"/>
    </c:if>
    <c:choose>
       <c:when test="${parent_rating eq 0}">
            <c:set var="parentRatingSCid" value=""/>
            <c:if test="${not empty s_cid}">
                 <c:set var="parentRatingSCid" value="&amp;s_cid=${s_cid}"/>
            </c:if>
            mySchool.parentRatingHtml += '<link:schoolProfileParentReview anchor="schoolReviewSubmitForm"
                    school="${curSchool}"><span class="sprite stars_sm_rate_it"><!-- do not collapse --></span></link:schoolProfileParentReview>';
       </c:when>
       <c:otherwise>
            mySchool.parentRatingHtml += '<div>Community Rating</div>'
            mySchool.parentRatingHtml += '<span class="sprite stars_sm_${parent_rating}"><!-- do not collapse --></span>';
       </c:otherwise>

    </c:choose>

    mySchool.parentRatingHtml += '</div>';

    mySchool.location = new google.maps.LatLng(${curSchool.lat},${curSchool.lon});
    schoolArray.push(mySchool);
  </c:if>
</c:forEach>
}

var GS_map;
var GS_map_zoomControl;
// Below this height, use extreme measures to try and keep info window visible
var GS_smallHeight = 275;

var needsExtraZoom = true;
var newMarkers = new Array();
var infoBoxInstance = null;

var deleteMarkers = function() {
    for(var i = 0; i &lt; newMarkers.length; i++) {
        newMarkers[i].setMap(null);
    }
    newMarkers = new Array();
}

function initMap() {
    var mapOptions = {
        center: centerPoint,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        disableDefaultUI: true,
        zoom: specifiedZoom !== 0 ? specifiedZoom : 13,
        zoomControl: true,
        zoomControlOptions: {
            style: google.maps.ZoomControlStyle.DEFAULT //may have to be set to SMALL
        },
        streetViewControl: false,
        panControl: false,
        infoWindow: infoWindow
    };

    GS_map = new google.maps.Map(document.getElementById("${id}"), mapOptions);
    document.getElementById("${id}").style.overflow = "hidden";

    if(schoolArray !== undefined &amp;&amp; schoolArray.length !== 0) {
        var bounds = new google.maps.LatLngBounds();
        bounds.extend(centerPoint);

        renderSchools(bounds, 'emh');
    }
    else {
        // getCenter?
        GS_map.setZoom(17);
    }

    if (showLocationMarker) {
        addLocationMarker(GS_map, locationPoint);
        extendBoundsToCenterOnPoint(locationPoint, bounds);
    }
}

function renderSchools(bounds, filterLevelCode) {
    <![CDATA[
    var zoom = GS_map.getZoom();
    if (zoom > maxZoom) zoom = maxZoom;
    if (minZoom > zoom) zoom = minZoom;
    if (specifiedZoom > 0) zoom = specifiedZoom;
    GS_map.setZoom(zoom);

    /*if (GS_map.getDiv().offsetHeight < GS_smallHeight) {
     google.maps.event.addListener(GS_map, "infowindowopen", function() {
     // trigger manual function to try and center window
     needsExtraZoom = true;
     });
     google.maps.event.addListener(GS_map, "infowindowbeforeclose", function() {
     // add zoom control back in
     GS_map.addControl(GS_map_zoomControl);
     needsExtraZoom = false;
     });
     google.maps.event.addListener(GS_map, "dragend", function() {
     if (needsExtraZoom) {
     // trigger manual function to try and center window
     //                window.setTimeout(panUpABit, 100);
     }
     });
     }*/
    deleteMarkers();
    if (schoolArray.length > 0) {
        var tooltip = null;
        var marker;
        var markerShape = {
            coord: [1, 0, 27, 0, 27, 32, 1, 32],
            type: 'poly'
        };
        var infoBoxOptions = {
            map: GS_map,
            maxWidth: 0,
            disableAutoPan: false,
            zIndex: null,
            boxStyle: {
                opacity: 1
            },
            closeBoxMargin: "8px 8px 0 8px",
            closeBoxURL:"/res/img/googleMaps/16x16_close.png",
            infoBoxClearance: new google.maps.Size(1, 1),
            isHidden: false,
            pane: "floatPane",
            alignBottom:true,
            enableEventPropagation: false
        };

        for (var counter=0; counter < schoolArray.length; counter++) {
            var curSchool = schoolArray[counter];

            if (filterLevelCode == undefined || filterLevelCode == 'emh' || containsLevelCode(curSchool.levelCode, filterLevelCode)) {
                if (curSchool.marker == undefined) {
                    tooltip = curSchool.name;
                    var image = "";
                    var imageValue = curSchool.rating;
                    if (imageValue == 0 || (alwaysUsePreIconsForPreschools && curSchool.levelCode.indexOf('p') != -1)) {
                        if (curSchool.levelCode == 'p') {
                            image = '/res/img/mapPins/preschool/preschool.png';
                        } else if (alwaysUsePreIconsForPreschools && curSchool.levelCode.indexOf('p') != -1) {
                            image = '/res/img/mapPins/preschool/preschool.png';
                        } else if (curSchool.type == 'private') {
                            image = (curSchool.isNewGSRating === 'true') ? '/res/img/mapPins/private/RYG/private_RGY_NR.png'
                                    : '/res/img/mapPins/private/O/private_orange_NR.png';
                        } else {
                            image = (curSchool.isNewGSRating === 'true') ? '/res/img/mapPins/public/RYG/RGY_NR.png'
                                    : '/res/img/mapPins/public/O/orange_NR.png';
                        }
                    } else {
                        if (curSchool.type == 'private') {
                            image = (curSchool.isNewGSRating === 'true') ? '/res/img/mapPins/private/RYG/private_RGY_' + imageValue + '.png' :
                                    '/res/img/mapPins/private/O/private_orange_' + imageValue + '.png';
                        } else {
                            image = (curSchool.isNewGSRating === 'true') ? '/res/img/mapPins/public/RYG/RGY_' + imageValue + '.png' :
                                    '/res/img/mapPins/public/O/orange_' + imageValue + '.png';
                        }
                    }
//
                    var position = curSchool.location;
                    var markerOptions = {
                        map: GS_map,
                        shape: markerShape,
                        position: position,
                        title: tooltip,
                        infoWindowMarkup: getSchoolInfoWindowHtml(curSchool),
                        icon: new google.maps.MarkerImage(
                                image, // url
                                new google.maps.Size(32, 32), // size
                                null, // origin
                                new google.maps.Point(14, 39) // anchor
                        )
                    };
//                    icon.infoWindowAnchor = new GPoint(21, 2);
//                    icon.infoShadowAnchor = new GPoint(21, 2);
                    var marker = new google.maps.Marker(markerOptions);
//                    bounds.extend(position);

                    newMarkers.push(marker);

//                    infoBoxInstance = new InfoBox(infoBoxOptions);
                    infoBoxInstance = new google.maps.InfoWindow({
                                maxWidth: 220}
                    );

                    google.maps.event.addListener(marker, "click", (function(marker) {
                        return function() {
                            if (useBubbles) {
                                infoBoxInstance.setContent(marker.infoWindowMarkup);
                                infoBoxInstance.open(GS_map, marker);
//                                GS_map.panBy(-0.4, 0);
                                GS_map.panTo(marker.position);
                                marker.setZIndex(9999);
                                addBubbleListener(marker, curSchool);
                            } else {
                                addClickListener(marker, curSchool.link); // because of closures, farm this off to another method
                            }
                        }
                    })(marker));
                    if (bounds != undefined) {
                        bounds.extend(curSchool.location);
                    }
                    curSchool.marker = marker;
                } else {
                    marker = curSchool.marker;
                }

//                GS_map.addOverlay(marker);
            }
        }
    }
    ]]>
}

function containsLevelCode(schoolLC, filterLC) {
    <![CDATA[
    var levelCodes = schoolLC.split(',');
    for (var i = 0; i < levelCodes.length; i++) {
        var levelCode = levelCodes[i];
        if (filterLC.indexOf(levelCode) != -1) {
            return true;
        }
    }

    return false;
    ]]>
}

function panUpABit() {
    // pan view down to keep top of info window visible  // replaced by panBy() for v3
    GS_map.panDirection(0,0.4);
    needsExtraZoom = false;
}

function addBubbleListener(marker, school) {
    if (s &amp;&amp; s.tl &amp;&amp; s.pageName != undefined) {
        s.tl(true, 'o', 'Map_pin_click_' + s.pageName);
    }
}

function addClickListener(marker, link) {
    if (s &amp;&amp; s.tl &amp;&amp; s.pageName != undefined) {
        s.tl(this, 'o', 'Map_pin_click_' + s.pageName);
    }
    document.location = link;
}

function addLocationMarker(GS_map, locationPoint) {
    /*var arrowIcon = new GIcon();
     arrowIcon.image = "/res/img/map/green_arrow.png";
     arrowIcon.shadow = "/res/img/map/green_arrow_shadow.png";
     arrowIcon.transparent = "/res/img/map/green_arrow_transparent.png";
     arrowIcon.iconSize = new GSize(39, 34);
     arrowIcon.iconAnchor = new GPoint(11, 34);
     arrowIcon.infoWindowAnchor = new GPoint(13, 2);
     arrowIcon.infoShadowAnchor = new GPoint(13, 2);
     arrowIcon.shadowSize = new GSize(39, 34);*/
    tooltip = null
    var markerOptions = {
        map: GS_map,
        title: tooltip,
        position: locationPoint,
        icon: new google.maps.MarkerImage(
                '/res/img/map/green_arrow.png', // url
                new google.maps.Size(39, 34), // size
                null, // origin
                new google.maps.Point(11, 34) // anchor
        ),
        shadow: new google.maps.MarkerImage(
                '/res/img/map/green_arrow_shadow.png', // url
                new google.maps.Size(39, 34), // size
                null, // origin
                new google.maps.Point(11, 34) // anchor
        )
    };
    var marker = new google.maps.Marker(markerOptions);

    // for the purposes of stack order, the star marker is treated as if it is
    // just north of the equator. This effectively makes it always on top of any
    // markers placed in the United States
//    function fakeLatitudeAtEquatorOrder(marker, b) {
//        return GOverlay.getZIndex(1.0);
//    }

    marker.setZIndex(89999); //http://mymonkeydo.com/converting-google-maps-v2-to-v3/
//    marker = new GMarker(locationPoint, {icon:arrowIcon, zIndexProcess: fakeLatitudeAtEquatorOrder, title: tooltip});
//    GS_map.addOverlay(marker);
}

function clearMarkers() {
    deleteMarkers();
    if (showLocationMarker) {
        addLocationMarker(GS_map, locationPoint);
    }
}

function checkResize() {
    // needed for when displayTab=search because map is not displayed
    // so Google Maps can't calculate map dimensions
    google.maps.event.trigger(GS_map, 'resize');
}

<![CDATA[
function getSchoolInfoWindowHtml(school) {
//    var height = 85; // default height
//    var heightMultiplier = Math.floor(school.name.length / 30);
    // add 13 pixels (font line-height) for every multiple of 30 that the school name's length exceeds
    // this is a guesstimate of how many chars it takes to wrap to the next line
//    height += heightMultiplier * 14;
                                      1
    var rval = '<div class="schoolInfoWindow" style="font: 11px/16px Trebuchet MS, Arial, sans-serif; width: 220px; padding-top: 10px">';
    rval += '<div class="schoolName" style="width: 210px;"><a href="' + school.link + '" target="_blank">'+ school.name + '</a></div>';
    rval += '<div class="line">';
    rval += '<div class="schoolRatings unit size49of100">';
    rval += school.ratingHtml;
    rval += school.parentRatingHtml;
    rval += '</div>';
    rval += '<div class="unit size1of100">&nbsp;'; //
    rval += '</div>'; //
    rval += '<div class="schoolAddress  unit size49of100">';
    rval += '<div class="typeGrade">';
    if (school.levelCode == 'p') {
        rval += 'Preschool';
    } else {
        rval += school.type + ', ' + school.gradeLevel;
    }
    rval += '</div>';
    rval += '<div>';
    rval += school.street + '<br />';
    rval += school.city + ', ' + school.state + ' ' + school.zip + '<br/>';
    rval += '</div>';
    if (school.phone == '') {
        rval += '<br/>';
    } else {
        rval += '<div class="schoolPhone">' + school.phone + '</div>';
    }
    rval += '</div>'; // schoolInfo
    rval += '<div class="unit size1of100 lastUnit">&nbsp;'; //
    rval += '</div>'; //
    rval += '</div>'; // line
    rval += '</div>'; // schoolInfoWindow
    return rval;
}
]]>

function GS_doMapSchoolsWithRatings() {
    initSchoolInfo();
    initMap();
}

</script>
</c:if>
</jsp:root>