<?xml version="1.0" encoding="UTF-8"?>
<jsp:root version="2.0"
          xmlns:jsp="http://java.sun.com/JSP/Page"
          xmlns:c="http://java.sun.com/jsp/jstl/core"
          xmlns:fn="http://java.sun.com/jsp/jstl/functions"
          xmlns:pageHelper="urn:jsptagdir:/WEB-INF/tags/pageHelper"
          xmlns:gsml="urn:jsptagdir:/WEB-INF/tags/gsml"
          xmlns:link="urn:www.greatschools.org/taglib/link"
          xmlns:map="urn:jsptagdir:/WEB-INF/tags/map"
        >
<jsp:directive.tag body-content="empty"
                   description="Draw a map of a school with nearby schools marked and extra info in a bubble."/>
<jsp:directive.attribute name="id" required="true" description="XML id of the Html div element that holds the map."/>
<jsp:directive.attribute name="school" required="true" type="gs.data.school.School"
                         description="The school this map is centered on"/>
<jsp:directive.attribute name="schools" required="true" description="Schools to map" type="java.util.Collection"/>
<jsp:directive.attribute name="tooltips" required="false" description="Use tooltips?"/>
<jsp:directive.attribute name="minZoom" required="false" type="java.lang.Integer"
                         description="Minimum google zoom to start with, defaults to 9"/>
<jsp:directive.attribute name="maxZoom" required="false" type="java.lang.Integer"
                         description="Maximum google zoom to start with, defaults to 12"/>
<jsp:directive.tag import="gs.data.admin.cobrand.Cobrand"/>
    <jsp:directive.tag import="gs.data.admin.cobrand.ICobrandDao"/>
    <jsp:directive.tag import="org.apache.commons.lang.StringUtils"/>
    <jsp:directive.tag import="org.apache.commons.logging.LogFactory"/>
    <jsp:directive.tag import="org.springframework.context.ApplicationContext"/>
    <jsp:directive.tag import="org.springframework.web.context.support.WebApplicationContextUtils"/>
    <jsp:directive.tag import="gs.web.util.context.SessionContext"/>

    <jsp:scriptlet>
            ApplicationContext ac =
                    WebApplicationContextUtils.getWebApplicationContext(application);
            ICobrandDao dao = (ICobrandDao) ac.getBean(ICobrandDao.BEAN_ID);
            String serverName = request.getServerName();

            // GS-6354 remove typo-ed trailing dot from server name before looking up
            if (serverName.endsWith(".")) {
                SessionContext context = (SessionContext) request.getAttribute(SessionContext.REQUEST_ATTRIBUTE_NAME);
                serverName = StringUtils.chomp(serverName, ".");
                // http://cpickslay.office.greatschools.org./city/Alameda/CA?cpn=123
                String uri = "http://" + serverName + context.getOriginalRequestURI();
                if (StringUtils.isNotEmpty(request.getQueryString())) {
                    uri = uri + "?" + request.getQueryString();
                }
                response.sendRedirect(uri);
            }

            Cobrand c = dao.getCobrandByHostname(serverName);
            if (c == null) {
                LogFactory.getLog("GoogleMappingApi").error("Unable to find key for server name " +
                        serverName);
            } else {
                request.setAttribute("key", c.getGoogleMapsKey());
            }
    </jsp:scriptlet>
    <pageHelper:externalJavascript file="http://maps.google.com/maps/api/js?sensor=false&amp;key=${requestScope.key}"/>


    <script type="text/javascript">
    GS.GSMapHelper = function(id, centerLatitude, centerLongitude) {

        var self = this;
        var map = null;
        var infoWindowTemplate = jQuery('#schoolInfoWindow');
        var minZoom = 9;
        var maxZoom = 12;
        var markers = {};
        var infoWindow = new google.maps.InfoWindow();

        this.setup = function() {
            var center = new google.maps.LatLng(centerLatitude, centerLongitude);
            var mapOptions = {
                zoom: 15,
                center: center,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };

            map = new google.maps.Map(document.getElementById(id), mapOptions);
            //map.addControl(new GLargeMapControl());
            //map.addControl(new GScaleControl());
            
            google.maps.event.addListener(map, 'click', function() {
                infowindow.close();
            });
            
            jQuery('#schoolInfoWindow').remove();
        }

        this.getMap = function() {
            return map;
        }

        this.addMarker = function(marker, state, id) {
            markers[state + id] = marker;
        }

        this.createAndAddMarker = function(id, databaseState, name, lat, lon, rating, infoWindowMarkup, markerClickedCallback) {
            if (id == undefined || databaseState == undefined || lat == undefined || lon == undefined) {
                return;
            }

            var location = new google.maps.LatLng(lat,lon);
            var marker = this.getGSRatingMarker(location, name, rating);
            marker.infoWindowMarkup = infoWindowMarkup;
            
            this.addMarker(marker, databaseState, id);

            google.maps.event.addListener(marker, "click", function() {
                infoWindow.setContent(marker.infoWindowMarkup);
                infoWindow.open(map, marker);
                markerClickedCallback(databaseState, id);
            });
        }

        this.showMarkerBubble = function(state, id) {
            var marker = markers[state + id];
            if (marker != undefined) {
                infoWindow.setContent(marker.infoWindowMarkup);
                infoWindow.open(map, marker);
            }
        }

        this.getBoundsToFitMarkers = function() {
            var bounds = null;
            var position = null;

            for (var marker in markers) {
                position = markers[marker].getPosition();

                if (bounds == null) {
                    bounds = new google.maps.LatLngBounds(position);
                } else {
                    bounds.extend(position);
                }
            }
            return bounds;
        }

        this.expandMapToFitMarkers = function() {
            var bounds = this.getBoundsToFitMarkers();
            map.fitBounds(bounds);
        }

        this.drawMarkers = function() {
            for (var marker in markers) {
                markers[marker].setMap(map);
            }
        }

        this.removeMarker = function(state, id) {
            delete markers[state + id];
        }

        this.createPrivateSchoolMarker = function(position, tooltip) {
                var icon = new google.maps.MarkerImage('/res/img/map/GS_gsr_private_forground.png',
                        new google.maps.Size(40,40),
                        new google.maps.Point(0,0),
                        new google.maps.Point(11,34));
                var shadow = new google.maps.MarkerImage('/res/img/map/GS_gsr_1_backgroundshadow.png',
                        new google.maps.Size(40,40),
                        new google.maps.Point(0,0),
                        new google.maps.Point(11,34));

            var marker = new google.maps.Marker({
                position: position,
                title: tooltip,
                icon: icon,
                shadow: shadow
            });

            return marker;
        }

        this.createPreschoolMarker = function(position, tooltip) {
                var icon = new google.maps.MarkerImage('/res/img/map/GS_gsr_preschool_forground.png',
                        new google.maps.Size(40,40),
                        new google.maps.Point(0,0),
                        new google.maps.Point(11,34));
                var shadow = new google.maps.MarkerImage('/res/img/map/GS_gsr_1_backgroundshadow.png',
                        new google.maps.Size(40,40),
                        new google.maps.Point(0,0),
                        new google.maps.Point(11,34));

            var marker = new google.maps.Marker({
                position: position,
                title: tooltip,
                icon: icon,
                shadow: shadow
            });

            return marker;
        }

        this.getGSRatingMarker = function(position, tooltip, rating) {

            if (rating != '') {
                var icon = new google.maps.MarkerImage('/res/img/map/GS_gsr_' + rating + '_forground.png',
                        new google.maps.Size(40,40),
                        new google.maps.Point(0,0),
                        new google.maps.Point(11,34));
                var shadow = new google.maps.MarkerImage('/res/img/map/GS_gsr_1_backgroundshadow.png',
                        new google.maps.Size(40,40),
                        new google.maps.Point(0,0),
                        new google.maps.Point(11,34));
                //pushpinIcon.transparent = '/res/img/map/GS_gsr_' + rating + '_forground_trans.png';
            } else {
                var icon = new google.maps.MarkerImage('/res/img/map/GS_gsr_na_forground.png',
                        new google.maps.Size(40,40),
                        new google.maps.Point(0,0),
                        new google.maps.Point(11,34));
                var shadow = new google.maps.MarkerImage('/res/img/map/GS_gsr_1_backgroundshadow.png',
                        new google.maps.Size(40,40),
                        new google.maps.Point(0,0),
                        new google.maps.Point(11,34));
                //pushpinIcon.transparent = '/res/img/map/GS_gsr_na_forground_trans.png';
            }

            var marker = new google.maps.Marker({
                position: position,
                title: tooltip,
                icon: icon,
                shadow: shadow
            });

            //pushpinIcon.iconAnchor = new GPoint(11, 34);
            //pushpinIcon.infoWindowAnchor = new GPoint(13, 2);
            //pushpinIcon.infoShadowAnchor = new GPoint(13, 2);
            //pushpinIcon.shadowSize = new GSize(39, 34);
            return marker;
        }

        //var displayTooltips = ${not empty tooltips};

        function doMapSchools() {
            if (GBrowserIsCompatible()) {
                initSchoolInfo();
                initMap();
            }
        }

    }

    var markerClickedCallback = function(state, id) {
        jQuery('.bg-color-f4fafd input:not(:checked').each(function(item) {
            jQuery(this).parent().parent().removeClass('bg-color-f4fafd');
        });
        jQuery('#nearby-schools-' + state + id).addClass('bg-color-f4fafd');
    }

    </script>


    <script type="text/javascript">
    <![CDATA[
    <!--
    ]]>
        <c:set var="infoWindowMarkup">
            <map:schoolBubble school="${school}" greatSchoolsRating="${gs_rating}" parentRating="${parent_rating}" />
        </c:set>

        jQuery(function(){
            mapHelper = new GS.GSMapHelper('${id}','${school.lat}','${school.lon}');
            mapHelper.setup();


                mapHelper.createAndAddMarker('${school.id}','${school.databaseState}','adfsfs','${school.lat}','${school.lon}',9, '${(infoWindowMarkup)}', markerClickedCallback);

            <c:forEach var ="nearbySchool" items = "${schools}">
                <c:set var="curSchool" value="${nearbySchool.neighbor}"/>
                <c:set var="infoWindowMarkup">
                    <map:schoolBubble school="${curSchool}" greatSchoolsRating="${nearbySchool.rating}" parentRating="${nearbySchool.rating}" />
                </c:set>

                mapHelper.createAndAddMarker('${curSchool.id}','${curSchool.databaseState}','adfsfs','${curSchool.lat}','${curSchool.lon}','${nearbySchool.rating}', '${(infoWindowMarkup)}', markerClickedCallback);

                jQuery('#nearby-schools-link-' + '${curSchool.databaseState}' + '${curSchool.id}').mouseover(function() {
                    mapHelper.showMarkerBubble('${curSchool.databaseState}', '${curSchool.id}');
                });
            </c:forEach>
            google.maps.event.addListenerOnce(mapHelper.getMap(), 'tilesloaded', function() {
                mapHelper.drawMarkers();
                mapHelper.expandMapToFitMarkers();
            });

        });
    -->
    </script>

</jsp:root>